// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2020.1
// Copyright (C) 1986-2020 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#include "StreamingDataflowPartition_2_IODMA_0_Stream2Mem_8u_1u_s.h"
#include "AESL_pkg.h"

using namespace std;

namespace ap_rtl {

const sc_logic StreamingDataflowPartition_2_IODMA_0_Stream2Mem_8u_1u_s::ap_const_logic_1 = sc_dt::Log_1;
const sc_logic StreamingDataflowPartition_2_IODMA_0_Stream2Mem_8u_1u_s::ap_const_logic_0 = sc_dt::Log_0;
const sc_lv<1> StreamingDataflowPartition_2_IODMA_0_Stream2Mem_8u_1u_s::ap_ST_fsm_pp0_stage0 = "1";
const bool StreamingDataflowPartition_2_IODMA_0_Stream2Mem_8u_1u_s::ap_const_boolean_1 = true;
const sc_lv<32> StreamingDataflowPartition_2_IODMA_0_Stream2Mem_8u_1u_s::ap_const_lv32_0 = "00000000000000000000000000000000";
const bool StreamingDataflowPartition_2_IODMA_0_Stream2Mem_8u_1u_s::ap_const_boolean_0 = false;
const sc_lv<64> StreamingDataflowPartition_2_IODMA_0_Stream2Mem_8u_1u_s::ap_const_lv64_0 = "0000000000000000000000000000000000000000000000000000000000000000";
const sc_lv<1> StreamingDataflowPartition_2_IODMA_0_Stream2Mem_8u_1u_s::ap_const_lv1_0 = "0";
const sc_lv<3> StreamingDataflowPartition_2_IODMA_0_Stream2Mem_8u_1u_s::ap_const_lv3_0 = "000";
const sc_lv<2> StreamingDataflowPartition_2_IODMA_0_Stream2Mem_8u_1u_s::ap_const_lv2_0 = "00";
const sc_lv<4> StreamingDataflowPartition_2_IODMA_0_Stream2Mem_8u_1u_s::ap_const_lv4_0 = "0000";
const sc_lv<32> StreamingDataflowPartition_2_IODMA_0_Stream2Mem_8u_1u_s::ap_const_lv32_1 = "1";
const sc_lv<1> StreamingDataflowPartition_2_IODMA_0_Stream2Mem_8u_1u_s::ap_const_lv1_1 = "1";

StreamingDataflowPartition_2_IODMA_0_Stream2Mem_8u_1u_s::StreamingDataflowPartition_2_IODMA_0_Stream2Mem_8u_1u_s(sc_module_name name) : sc_module(name), mVcdFile(0) {

    SC_METHOD(thread_ap_clk_no_reset_);
    dont_initialize();
    sensitive << ( ap_clk.pos() );

    SC_METHOD(thread_add_ln149_fu_88_p2);
    sensitive << ( out_V_offset );
    sensitive << ( zext_ln149_fu_84_p1 );

    SC_METHOD(thread_ap_CS_fsm_pp0_stage0);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_block_pp0_stage0);

    SC_METHOD(thread_ap_block_pp0_stage0_01001);
    sensitive << ( ap_start );
    sensitive << ( ap_enable_reg_pp0_iter7 );
    sensitive << ( in_V_V_TVALID );
    sensitive << ( m_axi_out_V_BVALID );

    SC_METHOD(thread_ap_block_pp0_stage0_11001);
    sensitive << ( ap_start );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( ap_enable_reg_pp0_iter2 );
    sensitive << ( ap_enable_reg_pp0_iter7 );
    sensitive << ( in_V_V_TVALID );
    sensitive << ( m_axi_out_V_AWREADY );
    sensitive << ( m_axi_out_V_WREADY );
    sensitive << ( m_axi_out_V_BVALID );

    SC_METHOD(thread_ap_block_pp0_stage0_subdone);
    sensitive << ( ap_start );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( ap_enable_reg_pp0_iter2 );
    sensitive << ( ap_enable_reg_pp0_iter7 );
    sensitive << ( in_V_V_TVALID );
    sensitive << ( m_axi_out_V_AWREADY );
    sensitive << ( m_axi_out_V_WREADY );
    sensitive << ( m_axi_out_V_BVALID );

    SC_METHOD(thread_ap_block_state1_pp0_stage0_iter0);
    sensitive << ( ap_start );
    sensitive << ( in_V_V_TVALID );

    SC_METHOD(thread_ap_block_state2_pp0_stage0_iter1);

    SC_METHOD(thread_ap_block_state3_pp0_stage0_iter2);

    SC_METHOD(thread_ap_block_state4_pp0_stage0_iter3);

    SC_METHOD(thread_ap_block_state5_pp0_stage0_iter4);

    SC_METHOD(thread_ap_block_state6_pp0_stage0_iter5);

    SC_METHOD(thread_ap_block_state7_pp0_stage0_iter6);

    SC_METHOD(thread_ap_block_state8_pp0_stage0_iter7);
    sensitive << ( m_axi_out_V_BVALID );

    SC_METHOD(thread_ap_done);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_block_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter7 );
    sensitive << ( ap_block_pp0_stage0_11001 );

    SC_METHOD(thread_ap_enable_pp0);
    sensitive << ( ap_idle_pp0 );

    SC_METHOD(thread_ap_enable_reg_pp0_iter0);
    sensitive << ( ap_start );

    SC_METHOD(thread_ap_idle);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_idle_pp0 );

    SC_METHOD(thread_ap_idle_pp0);
    sensitive << ( ap_enable_reg_pp0_iter0 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( ap_enable_reg_pp0_iter2 );
    sensitive << ( ap_enable_reg_pp0_iter3 );
    sensitive << ( ap_enable_reg_pp0_iter4 );
    sensitive << ( ap_enable_reg_pp0_iter5 );
    sensitive << ( ap_enable_reg_pp0_iter6 );
    sensitive << ( ap_enable_reg_pp0_iter7 );

    SC_METHOD(thread_ap_idle_pp0_0to6);
    sensitive << ( ap_enable_reg_pp0_iter0 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( ap_enable_reg_pp0_iter2 );
    sensitive << ( ap_enable_reg_pp0_iter3 );
    sensitive << ( ap_enable_reg_pp0_iter4 );
    sensitive << ( ap_enable_reg_pp0_iter5 );
    sensitive << ( ap_enable_reg_pp0_iter6 );

    SC_METHOD(thread_ap_ready);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_block_pp0_stage0_11001 );

    SC_METHOD(thread_ap_reset_idle_pp0);
    sensitive << ( ap_start );
    sensitive << ( ap_idle_pp0_0to6 );

    SC_METHOD(thread_in_V_V_TDATA_blk_n);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_block_pp0_stage0 );
    sensitive << ( in_V_V_TVALID );

    SC_METHOD(thread_in_V_V_TREADY);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_block_pp0_stage0_11001 );

    SC_METHOD(thread_m_axi_out_V_ARADDR);

    SC_METHOD(thread_m_axi_out_V_ARBURST);

    SC_METHOD(thread_m_axi_out_V_ARCACHE);

    SC_METHOD(thread_m_axi_out_V_ARID);

    SC_METHOD(thread_m_axi_out_V_ARLEN);

    SC_METHOD(thread_m_axi_out_V_ARLOCK);

    SC_METHOD(thread_m_axi_out_V_ARPROT);

    SC_METHOD(thread_m_axi_out_V_ARQOS);

    SC_METHOD(thread_m_axi_out_V_ARREGION);

    SC_METHOD(thread_m_axi_out_V_ARSIZE);

    SC_METHOD(thread_m_axi_out_V_ARUSER);

    SC_METHOD(thread_m_axi_out_V_ARVALID);

    SC_METHOD(thread_m_axi_out_V_AWADDR);
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( ap_block_pp0_stage0_11001 );
    sensitive << ( out_V_addr_reg_100 );

    SC_METHOD(thread_m_axi_out_V_AWBURST);

    SC_METHOD(thread_m_axi_out_V_AWCACHE);

    SC_METHOD(thread_m_axi_out_V_AWID);

    SC_METHOD(thread_m_axi_out_V_AWLEN);
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( ap_block_pp0_stage0_11001 );

    SC_METHOD(thread_m_axi_out_V_AWLOCK);

    SC_METHOD(thread_m_axi_out_V_AWPROT);

    SC_METHOD(thread_m_axi_out_V_AWQOS);

    SC_METHOD(thread_m_axi_out_V_AWREGION);

    SC_METHOD(thread_m_axi_out_V_AWSIZE);

    SC_METHOD(thread_m_axi_out_V_AWUSER);

    SC_METHOD(thread_m_axi_out_V_AWVALID);
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( ap_block_pp0_stage0_11001 );

    SC_METHOD(thread_m_axi_out_V_BREADY);
    sensitive << ( ap_enable_reg_pp0_iter7 );
    sensitive << ( ap_block_pp0_stage0_11001 );

    SC_METHOD(thread_m_axi_out_V_RREADY);

    SC_METHOD(thread_m_axi_out_V_WDATA);
    sensitive << ( ap_enable_reg_pp0_iter2 );
    sensitive << ( tmp_V_reg_106_pp0_iter1_reg );
    sensitive << ( ap_block_pp0_stage0_01001 );

    SC_METHOD(thread_m_axi_out_V_WID);

    SC_METHOD(thread_m_axi_out_V_WLAST);

    SC_METHOD(thread_m_axi_out_V_WSTRB);
    sensitive << ( ap_enable_reg_pp0_iter2 );
    sensitive << ( ap_block_pp0_stage0_01001 );

    SC_METHOD(thread_m_axi_out_V_WUSER);

    SC_METHOD(thread_m_axi_out_V_WVALID);
    sensitive << ( ap_enable_reg_pp0_iter2 );
    sensitive << ( ap_block_pp0_stage0_11001 );

    SC_METHOD(thread_out_V_blk_n_AW);
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_block_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( m_axi_out_V_AWREADY );

    SC_METHOD(thread_out_V_blk_n_B);
    sensitive << ( ap_block_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter7 );
    sensitive << ( m_axi_out_V_BVALID );

    SC_METHOD(thread_out_V_blk_n_W);
    sensitive << ( ap_block_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter2 );
    sensitive << ( m_axi_out_V_WREADY );

    SC_METHOD(thread_zext_ln149_fu_84_p1);
    sensitive << ( out_V_offset1 );

    SC_METHOD(thread_ap_NS_fsm);
    sensitive << ( ap_CS_fsm );
    sensitive << ( ap_block_pp0_stage0_subdone );
    sensitive << ( ap_reset_idle_pp0 );

    ap_CS_fsm = "1";
    ap_enable_reg_pp0_iter1 = SC_LOGIC_0;
    ap_enable_reg_pp0_iter2 = SC_LOGIC_0;
    ap_enable_reg_pp0_iter3 = SC_LOGIC_0;
    ap_enable_reg_pp0_iter4 = SC_LOGIC_0;
    ap_enable_reg_pp0_iter5 = SC_LOGIC_0;
    ap_enable_reg_pp0_iter6 = SC_LOGIC_0;
    ap_enable_reg_pp0_iter7 = SC_LOGIC_0;
    static int apTFileNum = 0;
    stringstream apTFilenSS;
    apTFilenSS << "StreamingDataflowPartition_2_IODMA_0_Stream2Mem_8u_1u_s_sc_trace_" << apTFileNum ++;
    string apTFn = apTFilenSS.str();
    mVcdFile = sc_create_vcd_trace_file(apTFn.c_str());
    mVcdFile->set_time_unit(1, SC_PS);
    if (1) {
#ifdef __HLS_TRACE_LEVEL_PORT_HIER__
    sc_trace(mVcdFile, ap_clk, "(port)ap_clk");
    sc_trace(mVcdFile, ap_rst, "(port)ap_rst");
    sc_trace(mVcdFile, ap_start, "(port)ap_start");
    sc_trace(mVcdFile, ap_done, "(port)ap_done");
    sc_trace(mVcdFile, ap_idle, "(port)ap_idle");
    sc_trace(mVcdFile, ap_ready, "(port)ap_ready");
    sc_trace(mVcdFile, in_V_V_TVALID, "(port)in_V_V_TVALID");
    sc_trace(mVcdFile, m_axi_out_V_AWVALID, "(port)m_axi_out_V_AWVALID");
    sc_trace(mVcdFile, m_axi_out_V_AWREADY, "(port)m_axi_out_V_AWREADY");
    sc_trace(mVcdFile, m_axi_out_V_AWADDR, "(port)m_axi_out_V_AWADDR");
    sc_trace(mVcdFile, m_axi_out_V_AWID, "(port)m_axi_out_V_AWID");
    sc_trace(mVcdFile, m_axi_out_V_AWLEN, "(port)m_axi_out_V_AWLEN");
    sc_trace(mVcdFile, m_axi_out_V_AWSIZE, "(port)m_axi_out_V_AWSIZE");
    sc_trace(mVcdFile, m_axi_out_V_AWBURST, "(port)m_axi_out_V_AWBURST");
    sc_trace(mVcdFile, m_axi_out_V_AWLOCK, "(port)m_axi_out_V_AWLOCK");
    sc_trace(mVcdFile, m_axi_out_V_AWCACHE, "(port)m_axi_out_V_AWCACHE");
    sc_trace(mVcdFile, m_axi_out_V_AWPROT, "(port)m_axi_out_V_AWPROT");
    sc_trace(mVcdFile, m_axi_out_V_AWQOS, "(port)m_axi_out_V_AWQOS");
    sc_trace(mVcdFile, m_axi_out_V_AWREGION, "(port)m_axi_out_V_AWREGION");
    sc_trace(mVcdFile, m_axi_out_V_AWUSER, "(port)m_axi_out_V_AWUSER");
    sc_trace(mVcdFile, m_axi_out_V_WVALID, "(port)m_axi_out_V_WVALID");
    sc_trace(mVcdFile, m_axi_out_V_WREADY, "(port)m_axi_out_V_WREADY");
    sc_trace(mVcdFile, m_axi_out_V_WDATA, "(port)m_axi_out_V_WDATA");
    sc_trace(mVcdFile, m_axi_out_V_WSTRB, "(port)m_axi_out_V_WSTRB");
    sc_trace(mVcdFile, m_axi_out_V_WLAST, "(port)m_axi_out_V_WLAST");
    sc_trace(mVcdFile, m_axi_out_V_WID, "(port)m_axi_out_V_WID");
    sc_trace(mVcdFile, m_axi_out_V_WUSER, "(port)m_axi_out_V_WUSER");
    sc_trace(mVcdFile, m_axi_out_V_ARVALID, "(port)m_axi_out_V_ARVALID");
    sc_trace(mVcdFile, m_axi_out_V_ARREADY, "(port)m_axi_out_V_ARREADY");
    sc_trace(mVcdFile, m_axi_out_V_ARADDR, "(port)m_axi_out_V_ARADDR");
    sc_trace(mVcdFile, m_axi_out_V_ARID, "(port)m_axi_out_V_ARID");
    sc_trace(mVcdFile, m_axi_out_V_ARLEN, "(port)m_axi_out_V_ARLEN");
    sc_trace(mVcdFile, m_axi_out_V_ARSIZE, "(port)m_axi_out_V_ARSIZE");
    sc_trace(mVcdFile, m_axi_out_V_ARBURST, "(port)m_axi_out_V_ARBURST");
    sc_trace(mVcdFile, m_axi_out_V_ARLOCK, "(port)m_axi_out_V_ARLOCK");
    sc_trace(mVcdFile, m_axi_out_V_ARCACHE, "(port)m_axi_out_V_ARCACHE");
    sc_trace(mVcdFile, m_axi_out_V_ARPROT, "(port)m_axi_out_V_ARPROT");
    sc_trace(mVcdFile, m_axi_out_V_ARQOS, "(port)m_axi_out_V_ARQOS");
    sc_trace(mVcdFile, m_axi_out_V_ARREGION, "(port)m_axi_out_V_ARREGION");
    sc_trace(mVcdFile, m_axi_out_V_ARUSER, "(port)m_axi_out_V_ARUSER");
    sc_trace(mVcdFile, m_axi_out_V_RVALID, "(port)m_axi_out_V_RVALID");
    sc_trace(mVcdFile, m_axi_out_V_RREADY, "(port)m_axi_out_V_RREADY");
    sc_trace(mVcdFile, m_axi_out_V_RDATA, "(port)m_axi_out_V_RDATA");
    sc_trace(mVcdFile, m_axi_out_V_RLAST, "(port)m_axi_out_V_RLAST");
    sc_trace(mVcdFile, m_axi_out_V_RID, "(port)m_axi_out_V_RID");
    sc_trace(mVcdFile, m_axi_out_V_RUSER, "(port)m_axi_out_V_RUSER");
    sc_trace(mVcdFile, m_axi_out_V_RRESP, "(port)m_axi_out_V_RRESP");
    sc_trace(mVcdFile, m_axi_out_V_BVALID, "(port)m_axi_out_V_BVALID");
    sc_trace(mVcdFile, m_axi_out_V_BREADY, "(port)m_axi_out_V_BREADY");
    sc_trace(mVcdFile, m_axi_out_V_BRESP, "(port)m_axi_out_V_BRESP");
    sc_trace(mVcdFile, m_axi_out_V_BID, "(port)m_axi_out_V_BID");
    sc_trace(mVcdFile, m_axi_out_V_BUSER, "(port)m_axi_out_V_BUSER");
    sc_trace(mVcdFile, in_V_V_TDATA, "(port)in_V_V_TDATA");
    sc_trace(mVcdFile, in_V_V_TREADY, "(port)in_V_V_TREADY");
    sc_trace(mVcdFile, out_V_offset, "(port)out_V_offset");
    sc_trace(mVcdFile, out_V_offset1, "(port)out_V_offset1");
    sc_trace(mVcdFile, in_V_V_TDATA_blk_n, "(port)in_V_V_TDATA_blk_n");
    sc_trace(mVcdFile, out_V_blk_n_AW, "(port)out_V_blk_n_AW");
    sc_trace(mVcdFile, out_V_blk_n_W, "(port)out_V_blk_n_W");
    sc_trace(mVcdFile, out_V_blk_n_B, "(port)out_V_blk_n_B");
#endif
#ifdef __HLS_TRACE_LEVEL_INT__
    sc_trace(mVcdFile, ap_CS_fsm, "ap_CS_fsm");
    sc_trace(mVcdFile, ap_CS_fsm_pp0_stage0, "ap_CS_fsm_pp0_stage0");
    sc_trace(mVcdFile, ap_enable_reg_pp0_iter0, "ap_enable_reg_pp0_iter0");
    sc_trace(mVcdFile, ap_block_pp0_stage0, "ap_block_pp0_stage0");
    sc_trace(mVcdFile, ap_enable_reg_pp0_iter1, "ap_enable_reg_pp0_iter1");
    sc_trace(mVcdFile, ap_enable_reg_pp0_iter2, "ap_enable_reg_pp0_iter2");
    sc_trace(mVcdFile, ap_enable_reg_pp0_iter3, "ap_enable_reg_pp0_iter3");
    sc_trace(mVcdFile, ap_enable_reg_pp0_iter4, "ap_enable_reg_pp0_iter4");
    sc_trace(mVcdFile, ap_enable_reg_pp0_iter5, "ap_enable_reg_pp0_iter5");
    sc_trace(mVcdFile, ap_enable_reg_pp0_iter6, "ap_enable_reg_pp0_iter6");
    sc_trace(mVcdFile, ap_enable_reg_pp0_iter7, "ap_enable_reg_pp0_iter7");
    sc_trace(mVcdFile, ap_idle_pp0, "ap_idle_pp0");
    sc_trace(mVcdFile, ap_block_state1_pp0_stage0_iter0, "ap_block_state1_pp0_stage0_iter0");
    sc_trace(mVcdFile, ap_block_state2_pp0_stage0_iter1, "ap_block_state2_pp0_stage0_iter1");
    sc_trace(mVcdFile, ap_block_state3_pp0_stage0_iter2, "ap_block_state3_pp0_stage0_iter2");
    sc_trace(mVcdFile, ap_block_state4_pp0_stage0_iter3, "ap_block_state4_pp0_stage0_iter3");
    sc_trace(mVcdFile, ap_block_state5_pp0_stage0_iter4, "ap_block_state5_pp0_stage0_iter4");
    sc_trace(mVcdFile, ap_block_state6_pp0_stage0_iter5, "ap_block_state6_pp0_stage0_iter5");
    sc_trace(mVcdFile, ap_block_state7_pp0_stage0_iter6, "ap_block_state7_pp0_stage0_iter6");
    sc_trace(mVcdFile, ap_block_state8_pp0_stage0_iter7, "ap_block_state8_pp0_stage0_iter7");
    sc_trace(mVcdFile, ap_block_pp0_stage0_11001, "ap_block_pp0_stage0_11001");
    sc_trace(mVcdFile, out_V_addr_reg_100, "out_V_addr_reg_100");
    sc_trace(mVcdFile, tmp_V_reg_106, "tmp_V_reg_106");
    sc_trace(mVcdFile, tmp_V_reg_106_pp0_iter1_reg, "tmp_V_reg_106_pp0_iter1_reg");
    sc_trace(mVcdFile, ap_block_pp0_stage0_subdone, "ap_block_pp0_stage0_subdone");
    sc_trace(mVcdFile, add_ln149_fu_88_p2, "add_ln149_fu_88_p2");
    sc_trace(mVcdFile, ap_block_pp0_stage0_01001, "ap_block_pp0_stage0_01001");
    sc_trace(mVcdFile, zext_ln149_fu_84_p1, "zext_ln149_fu_84_p1");
    sc_trace(mVcdFile, ap_NS_fsm, "ap_NS_fsm");
    sc_trace(mVcdFile, ap_idle_pp0_0to6, "ap_idle_pp0_0to6");
    sc_trace(mVcdFile, ap_reset_idle_pp0, "ap_reset_idle_pp0");
    sc_trace(mVcdFile, ap_enable_pp0, "ap_enable_pp0");
#endif

    }
}

StreamingDataflowPartition_2_IODMA_0_Stream2Mem_8u_1u_s::~StreamingDataflowPartition_2_IODMA_0_Stream2Mem_8u_1u_s() {
    if (mVcdFile) 
        sc_close_vcd_trace_file(mVcdFile);

}

void StreamingDataflowPartition_2_IODMA_0_Stream2Mem_8u_1u_s::thread_ap_clk_no_reset_() {
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_CS_fsm = ap_ST_fsm_pp0_stage0;
    } else {
        ap_CS_fsm = ap_NS_fsm.read();
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_enable_reg_pp0_iter1 = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
             esl_seteq<1,1,1>(ap_block_pp0_stage0_subdone.read(), ap_const_boolean_0))) {
            ap_enable_reg_pp0_iter1 = ap_start.read();
        }
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_enable_reg_pp0_iter2 = ap_const_logic_0;
    } else {
        if (esl_seteq<1,1,1>(ap_block_pp0_stage0_subdone.read(), ap_const_boolean_0)) {
            ap_enable_reg_pp0_iter2 = ap_enable_reg_pp0_iter1.read();
        }
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_enable_reg_pp0_iter3 = ap_const_logic_0;
    } else {
        if (esl_seteq<1,1,1>(ap_block_pp0_stage0_subdone.read(), ap_const_boolean_0)) {
            ap_enable_reg_pp0_iter3 = ap_enable_reg_pp0_iter2.read();
        }
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_enable_reg_pp0_iter4 = ap_const_logic_0;
    } else {
        if (esl_seteq<1,1,1>(ap_block_pp0_stage0_subdone.read(), ap_const_boolean_0)) {
            ap_enable_reg_pp0_iter4 = ap_enable_reg_pp0_iter3.read();
        }
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_enable_reg_pp0_iter5 = ap_const_logic_0;
    } else {
        if (esl_seteq<1,1,1>(ap_block_pp0_stage0_subdone.read(), ap_const_boolean_0)) {
            ap_enable_reg_pp0_iter5 = ap_enable_reg_pp0_iter4.read();
        }
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_enable_reg_pp0_iter6 = ap_const_logic_0;
    } else {
        if (esl_seteq<1,1,1>(ap_block_pp0_stage0_subdone.read(), ap_const_boolean_0)) {
            ap_enable_reg_pp0_iter6 = ap_enable_reg_pp0_iter5.read();
        }
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_enable_reg_pp0_iter7 = ap_const_logic_0;
    } else {
        if (esl_seteq<1,1,1>(ap_block_pp0_stage0_subdone.read(), ap_const_boolean_0)) {
            ap_enable_reg_pp0_iter7 = ap_enable_reg_pp0_iter6.read();
        }
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0))) {
        out_V_addr_reg_100 = add_ln149_fu_88_p2.read();
        tmp_V_reg_106 = in_V_V_TDATA.read();
        tmp_V_reg_106_pp0_iter1_reg = tmp_V_reg_106.read();
    }
}

void StreamingDataflowPartition_2_IODMA_0_Stream2Mem_8u_1u_s::thread_add_ln149_fu_88_p2() {
    add_ln149_fu_88_p2 = (!zext_ln149_fu_84_p1.read().is_01() || !out_V_offset.read().is_01())? sc_lv<64>(): (sc_biguint<64>(zext_ln149_fu_84_p1.read()) + sc_biguint<64>(out_V_offset.read()));
}

void StreamingDataflowPartition_2_IODMA_0_Stream2Mem_8u_1u_s::thread_ap_CS_fsm_pp0_stage0() {
    ap_CS_fsm_pp0_stage0 = ap_CS_fsm.read()[0];
}

void StreamingDataflowPartition_2_IODMA_0_Stream2Mem_8u_1u_s::thread_ap_block_pp0_stage0() {
    ap_block_pp0_stage0 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void StreamingDataflowPartition_2_IODMA_0_Stream2Mem_8u_1u_s::thread_ap_block_pp0_stage0_01001() {
    ap_block_pp0_stage0_01001 = ((esl_seteq<1,1,1>(ap_const_logic_1, ap_start.read()) && 
  (esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) || 
   esl_seteq<1,1,1>(ap_const_logic_0, in_V_V_TVALID.read()))) || (esl_seteq<1,1,1>(ap_const_logic_0, m_axi_out_V_BVALID.read()) && 
  esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter7.read())));
}

void StreamingDataflowPartition_2_IODMA_0_Stream2Mem_8u_1u_s::thread_ap_block_pp0_stage0_11001() {
    ap_block_pp0_stage0_11001 = ((esl_seteq<1,1,1>(ap_const_logic_1, ap_start.read()) && 
  (esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) || 
   esl_seteq<1,1,1>(ap_const_logic_0, in_V_V_TVALID.read()))) || (esl_seteq<1,1,1>(ap_const_logic_0, m_axi_out_V_AWREADY.read()) && 
  esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read())) || (esl_seteq<1,1,1>(ap_const_logic_0, m_axi_out_V_WREADY.read()) && 
  esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter2.read())) || (esl_seteq<1,1,1>(ap_const_logic_0, m_axi_out_V_BVALID.read()) && 
  esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter7.read())));
}

void StreamingDataflowPartition_2_IODMA_0_Stream2Mem_8u_1u_s::thread_ap_block_pp0_stage0_subdone() {
    ap_block_pp0_stage0_subdone = ((esl_seteq<1,1,1>(ap_const_logic_1, ap_start.read()) && 
  (esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) || 
   esl_seteq<1,1,1>(ap_const_logic_0, in_V_V_TVALID.read()))) || (esl_seteq<1,1,1>(ap_const_logic_0, m_axi_out_V_AWREADY.read()) && 
  esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read())) || (esl_seteq<1,1,1>(ap_const_logic_0, m_axi_out_V_WREADY.read()) && 
  esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter2.read())) || (esl_seteq<1,1,1>(ap_const_logic_0, m_axi_out_V_BVALID.read()) && 
  esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter7.read())));
}

void StreamingDataflowPartition_2_IODMA_0_Stream2Mem_8u_1u_s::thread_ap_block_state1_pp0_stage0_iter0() {
    ap_block_state1_pp0_stage0_iter0 = (esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) || esl_seteq<1,1,1>(ap_const_logic_0, in_V_V_TVALID.read()));
}

void StreamingDataflowPartition_2_IODMA_0_Stream2Mem_8u_1u_s::thread_ap_block_state2_pp0_stage0_iter1() {
    ap_block_state2_pp0_stage0_iter1 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void StreamingDataflowPartition_2_IODMA_0_Stream2Mem_8u_1u_s::thread_ap_block_state3_pp0_stage0_iter2() {
    ap_block_state3_pp0_stage0_iter2 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void StreamingDataflowPartition_2_IODMA_0_Stream2Mem_8u_1u_s::thread_ap_block_state4_pp0_stage0_iter3() {
    ap_block_state4_pp0_stage0_iter3 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void StreamingDataflowPartition_2_IODMA_0_Stream2Mem_8u_1u_s::thread_ap_block_state5_pp0_stage0_iter4() {
    ap_block_state5_pp0_stage0_iter4 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void StreamingDataflowPartition_2_IODMA_0_Stream2Mem_8u_1u_s::thread_ap_block_state6_pp0_stage0_iter5() {
    ap_block_state6_pp0_stage0_iter5 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void StreamingDataflowPartition_2_IODMA_0_Stream2Mem_8u_1u_s::thread_ap_block_state7_pp0_stage0_iter6() {
    ap_block_state7_pp0_stage0_iter6 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void StreamingDataflowPartition_2_IODMA_0_Stream2Mem_8u_1u_s::thread_ap_block_state8_pp0_stage0_iter7() {
    ap_block_state8_pp0_stage0_iter7 = esl_seteq<1,1,1>(ap_const_logic_0, m_axi_out_V_BVALID.read());
}

void StreamingDataflowPartition_2_IODMA_0_Stream2Mem_8u_1u_s::thread_ap_done() {
    if (((esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_start.read()) && 
          esl_seteq<1,1,1>(ap_block_pp0_stage0.read(), ap_const_boolean_0)) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter7.read()) && 
          esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0)))) {
        ap_done = ap_const_logic_1;
    } else {
        ap_done = ap_const_logic_0;
    }
}

void StreamingDataflowPartition_2_IODMA_0_Stream2Mem_8u_1u_s::thread_ap_enable_pp0() {
    ap_enable_pp0 = (ap_idle_pp0.read() ^ ap_const_logic_1);
}

void StreamingDataflowPartition_2_IODMA_0_Stream2Mem_8u_1u_s::thread_ap_enable_reg_pp0_iter0() {
    ap_enable_reg_pp0_iter0 = ap_start.read();
}

void StreamingDataflowPartition_2_IODMA_0_Stream2Mem_8u_1u_s::thread_ap_idle() {
    if ((esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_idle_pp0.read()))) {
        ap_idle = ap_const_logic_1;
    } else {
        ap_idle = ap_const_logic_0;
    }
}

void StreamingDataflowPartition_2_IODMA_0_Stream2Mem_8u_1u_s::thread_ap_idle_pp0() {
    if ((esl_seteq<1,1,1>(ap_const_logic_0, ap_enable_reg_pp0_iter0.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_0, ap_enable_reg_pp0_iter1.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_0, ap_enable_reg_pp0_iter2.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_0, ap_enable_reg_pp0_iter3.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_0, ap_enable_reg_pp0_iter4.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_0, ap_enable_reg_pp0_iter5.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_0, ap_enable_reg_pp0_iter6.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_0, ap_enable_reg_pp0_iter7.read()))) {
        ap_idle_pp0 = ap_const_logic_1;
    } else {
        ap_idle_pp0 = ap_const_logic_0;
    }
}

void StreamingDataflowPartition_2_IODMA_0_Stream2Mem_8u_1u_s::thread_ap_idle_pp0_0to6() {
    if ((esl_seteq<1,1,1>(ap_const_logic_0, ap_enable_reg_pp0_iter0.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_0, ap_enable_reg_pp0_iter1.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_0, ap_enable_reg_pp0_iter2.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_0, ap_enable_reg_pp0_iter3.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_0, ap_enable_reg_pp0_iter4.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_0, ap_enable_reg_pp0_iter5.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_0, ap_enable_reg_pp0_iter6.read()))) {
        ap_idle_pp0_0to6 = ap_const_logic_1;
    } else {
        ap_idle_pp0_0to6 = ap_const_logic_0;
    }
}

void StreamingDataflowPartition_2_IODMA_0_Stream2Mem_8u_1u_s::thread_ap_ready() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_start.read()) && 
         esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0))) {
        ap_ready = ap_const_logic_1;
    } else {
        ap_ready = ap_const_logic_0;
    }
}

void StreamingDataflowPartition_2_IODMA_0_Stream2Mem_8u_1u_s::thread_ap_reset_idle_pp0() {
    if ((esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_idle_pp0_0to6.read()))) {
        ap_reset_idle_pp0 = ap_const_logic_1;
    } else {
        ap_reset_idle_pp0 = ap_const_logic_0;
    }
}

void StreamingDataflowPartition_2_IODMA_0_Stream2Mem_8u_1u_s::thread_in_V_V_TDATA_blk_n() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_start.read()) && 
         esl_seteq<1,1,1>(ap_block_pp0_stage0.read(), ap_const_boolean_0) && 
         esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1))) {
        in_V_V_TDATA_blk_n = in_V_V_TVALID.read();
    } else {
        in_V_V_TDATA_blk_n = ap_const_logic_1;
    }
}

void StreamingDataflowPartition_2_IODMA_0_Stream2Mem_8u_1u_s::thread_in_V_V_TREADY() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_start.read()) && 
         esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0))) {
        in_V_V_TREADY = ap_const_logic_1;
    } else {
        in_V_V_TREADY = ap_const_logic_0;
    }
}

void StreamingDataflowPartition_2_IODMA_0_Stream2Mem_8u_1u_s::thread_m_axi_out_V_ARADDR() {
    m_axi_out_V_ARADDR = ap_const_lv64_0;
}

void StreamingDataflowPartition_2_IODMA_0_Stream2Mem_8u_1u_s::thread_m_axi_out_V_ARBURST() {
    m_axi_out_V_ARBURST = ap_const_lv2_0;
}

void StreamingDataflowPartition_2_IODMA_0_Stream2Mem_8u_1u_s::thread_m_axi_out_V_ARCACHE() {
    m_axi_out_V_ARCACHE = ap_const_lv4_0;
}

void StreamingDataflowPartition_2_IODMA_0_Stream2Mem_8u_1u_s::thread_m_axi_out_V_ARID() {
    m_axi_out_V_ARID = ap_const_lv1_0;
}

void StreamingDataflowPartition_2_IODMA_0_Stream2Mem_8u_1u_s::thread_m_axi_out_V_ARLEN() {
    m_axi_out_V_ARLEN = ap_const_lv32_0;
}

void StreamingDataflowPartition_2_IODMA_0_Stream2Mem_8u_1u_s::thread_m_axi_out_V_ARLOCK() {
    m_axi_out_V_ARLOCK = ap_const_lv2_0;
}

void StreamingDataflowPartition_2_IODMA_0_Stream2Mem_8u_1u_s::thread_m_axi_out_V_ARPROT() {
    m_axi_out_V_ARPROT = ap_const_lv3_0;
}

void StreamingDataflowPartition_2_IODMA_0_Stream2Mem_8u_1u_s::thread_m_axi_out_V_ARQOS() {
    m_axi_out_V_ARQOS = ap_const_lv4_0;
}

void StreamingDataflowPartition_2_IODMA_0_Stream2Mem_8u_1u_s::thread_m_axi_out_V_ARREGION() {
    m_axi_out_V_ARREGION = ap_const_lv4_0;
}

void StreamingDataflowPartition_2_IODMA_0_Stream2Mem_8u_1u_s::thread_m_axi_out_V_ARSIZE() {
    m_axi_out_V_ARSIZE = ap_const_lv3_0;
}

void StreamingDataflowPartition_2_IODMA_0_Stream2Mem_8u_1u_s::thread_m_axi_out_V_ARUSER() {
    m_axi_out_V_ARUSER = ap_const_lv1_0;
}

void StreamingDataflowPartition_2_IODMA_0_Stream2Mem_8u_1u_s::thread_m_axi_out_V_ARVALID() {
    m_axi_out_V_ARVALID = ap_const_logic_0;
}

void StreamingDataflowPartition_2_IODMA_0_Stream2Mem_8u_1u_s::thread_m_axi_out_V_AWADDR() {
    m_axi_out_V_AWADDR = out_V_addr_reg_100.read();
}

void StreamingDataflowPartition_2_IODMA_0_Stream2Mem_8u_1u_s::thread_m_axi_out_V_AWBURST() {
    m_axi_out_V_AWBURST = ap_const_lv2_0;
}

void StreamingDataflowPartition_2_IODMA_0_Stream2Mem_8u_1u_s::thread_m_axi_out_V_AWCACHE() {
    m_axi_out_V_AWCACHE = ap_const_lv4_0;
}

void StreamingDataflowPartition_2_IODMA_0_Stream2Mem_8u_1u_s::thread_m_axi_out_V_AWID() {
    m_axi_out_V_AWID = ap_const_lv1_0;
}

void StreamingDataflowPartition_2_IODMA_0_Stream2Mem_8u_1u_s::thread_m_axi_out_V_AWLEN() {
    m_axi_out_V_AWLEN = ap_const_lv32_1;
}

void StreamingDataflowPartition_2_IODMA_0_Stream2Mem_8u_1u_s::thread_m_axi_out_V_AWLOCK() {
    m_axi_out_V_AWLOCK = ap_const_lv2_0;
}

void StreamingDataflowPartition_2_IODMA_0_Stream2Mem_8u_1u_s::thread_m_axi_out_V_AWPROT() {
    m_axi_out_V_AWPROT = ap_const_lv3_0;
}

void StreamingDataflowPartition_2_IODMA_0_Stream2Mem_8u_1u_s::thread_m_axi_out_V_AWQOS() {
    m_axi_out_V_AWQOS = ap_const_lv4_0;
}

void StreamingDataflowPartition_2_IODMA_0_Stream2Mem_8u_1u_s::thread_m_axi_out_V_AWREGION() {
    m_axi_out_V_AWREGION = ap_const_lv4_0;
}

void StreamingDataflowPartition_2_IODMA_0_Stream2Mem_8u_1u_s::thread_m_axi_out_V_AWSIZE() {
    m_axi_out_V_AWSIZE = ap_const_lv3_0;
}

void StreamingDataflowPartition_2_IODMA_0_Stream2Mem_8u_1u_s::thread_m_axi_out_V_AWUSER() {
    m_axi_out_V_AWUSER = ap_const_lv1_0;
}

void StreamingDataflowPartition_2_IODMA_0_Stream2Mem_8u_1u_s::thread_m_axi_out_V_AWVALID() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && 
         esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0))) {
        m_axi_out_V_AWVALID = ap_const_logic_1;
    } else {
        m_axi_out_V_AWVALID = ap_const_logic_0;
    }
}

void StreamingDataflowPartition_2_IODMA_0_Stream2Mem_8u_1u_s::thread_m_axi_out_V_BREADY() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter7.read()) && 
         esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0))) {
        m_axi_out_V_BREADY = ap_const_logic_1;
    } else {
        m_axi_out_V_BREADY = ap_const_logic_0;
    }
}

void StreamingDataflowPartition_2_IODMA_0_Stream2Mem_8u_1u_s::thread_m_axi_out_V_RREADY() {
    m_axi_out_V_RREADY = ap_const_logic_0;
}

void StreamingDataflowPartition_2_IODMA_0_Stream2Mem_8u_1u_s::thread_m_axi_out_V_WDATA() {
    m_axi_out_V_WDATA = tmp_V_reg_106_pp0_iter1_reg.read();
}

void StreamingDataflowPartition_2_IODMA_0_Stream2Mem_8u_1u_s::thread_m_axi_out_V_WID() {
    m_axi_out_V_WID = ap_const_lv1_0;
}

void StreamingDataflowPartition_2_IODMA_0_Stream2Mem_8u_1u_s::thread_m_axi_out_V_WLAST() {
    m_axi_out_V_WLAST = ap_const_logic_0;
}

void StreamingDataflowPartition_2_IODMA_0_Stream2Mem_8u_1u_s::thread_m_axi_out_V_WSTRB() {
    m_axi_out_V_WSTRB = ap_const_lv1_1;
}

void StreamingDataflowPartition_2_IODMA_0_Stream2Mem_8u_1u_s::thread_m_axi_out_V_WUSER() {
    m_axi_out_V_WUSER = ap_const_lv1_0;
}

void StreamingDataflowPartition_2_IODMA_0_Stream2Mem_8u_1u_s::thread_m_axi_out_V_WVALID() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter2.read()) && 
         esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0))) {
        m_axi_out_V_WVALID = ap_const_logic_1;
    } else {
        m_axi_out_V_WVALID = ap_const_logic_0;
    }
}

void StreamingDataflowPartition_2_IODMA_0_Stream2Mem_8u_1u_s::thread_out_V_blk_n_AW() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
         esl_seteq<1,1,1>(ap_block_pp0_stage0.read(), ap_const_boolean_0) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()))) {
        out_V_blk_n_AW = m_axi_out_V_AWREADY.read();
    } else {
        out_V_blk_n_AW = ap_const_logic_1;
    }
}

void StreamingDataflowPartition_2_IODMA_0_Stream2Mem_8u_1u_s::thread_out_V_blk_n_B() {
    if ((esl_seteq<1,1,1>(ap_block_pp0_stage0.read(), ap_const_boolean_0) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter7.read()))) {
        out_V_blk_n_B = m_axi_out_V_BVALID.read();
    } else {
        out_V_blk_n_B = ap_const_logic_1;
    }
}

void StreamingDataflowPartition_2_IODMA_0_Stream2Mem_8u_1u_s::thread_out_V_blk_n_W() {
    if ((esl_seteq<1,1,1>(ap_block_pp0_stage0.read(), ap_const_boolean_0) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter2.read()))) {
        out_V_blk_n_W = m_axi_out_V_WREADY.read();
    } else {
        out_V_blk_n_W = ap_const_logic_1;
    }
}

void StreamingDataflowPartition_2_IODMA_0_Stream2Mem_8u_1u_s::thread_zext_ln149_fu_84_p1() {
    zext_ln149_fu_84_p1 = esl_zext<64,32>(out_V_offset1.read());
}

void StreamingDataflowPartition_2_IODMA_0_Stream2Mem_8u_1u_s::thread_ap_NS_fsm() {
    switch (ap_CS_fsm.read().to_uint64()) {
        case 1 : 
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
break;
        default : 
            ap_NS_fsm = "X";
            break;
    }
}

}

