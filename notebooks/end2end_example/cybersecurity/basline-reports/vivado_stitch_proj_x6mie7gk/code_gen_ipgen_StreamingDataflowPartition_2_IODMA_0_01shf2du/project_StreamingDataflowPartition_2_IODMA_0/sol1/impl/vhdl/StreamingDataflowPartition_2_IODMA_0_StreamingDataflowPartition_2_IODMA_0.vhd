-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
-- Version: 2020.1
-- Copyright (C) 1986-2020 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity StreamingDataflowPartition_2_IODMA_0_StreamingDataflowPartition_2_IODMA_0 is
generic (
    C_S_AXI_CONTROL_ADDR_WIDTH : INTEGER := 6;
    C_S_AXI_CONTROL_DATA_WIDTH : INTEGER := 32;
    C_M_AXI_GMEM_ADDR_WIDTH : INTEGER := 64;
    C_M_AXI_GMEM_ID_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM_AWUSER_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM_DATA_WIDTH : INTEGER := 32;
    C_M_AXI_GMEM_WUSER_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM_ARUSER_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM_RUSER_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM_BUSER_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM_USER_VALUE : INTEGER := 0;
    C_M_AXI_GMEM_PROT_VALUE : INTEGER := 0;
    C_M_AXI_GMEM_CACHE_VALUE : INTEGER := 3 );
port (
    s_axi_control_AWVALID : IN STD_LOGIC;
    s_axi_control_AWREADY : OUT STD_LOGIC;
    s_axi_control_AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_CONTROL_ADDR_WIDTH-1 downto 0);
    s_axi_control_WVALID : IN STD_LOGIC;
    s_axi_control_WREADY : OUT STD_LOGIC;
    s_axi_control_WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_CONTROL_DATA_WIDTH-1 downto 0);
    s_axi_control_WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_CONTROL_DATA_WIDTH/8-1 downto 0);
    s_axi_control_ARVALID : IN STD_LOGIC;
    s_axi_control_ARREADY : OUT STD_LOGIC;
    s_axi_control_ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_CONTROL_ADDR_WIDTH-1 downto 0);
    s_axi_control_RVALID : OUT STD_LOGIC;
    s_axi_control_RREADY : IN STD_LOGIC;
    s_axi_control_RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_CONTROL_DATA_WIDTH-1 downto 0);
    s_axi_control_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    s_axi_control_BVALID : OUT STD_LOGIC;
    s_axi_control_BREADY : IN STD_LOGIC;
    s_axi_control_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    ap_clk : IN STD_LOGIC;
    ap_rst_n : IN STD_LOGIC;
    interrupt : OUT STD_LOGIC;
    m_axi_gmem_AWVALID : OUT STD_LOGIC;
    m_axi_gmem_AWREADY : IN STD_LOGIC;
    m_axi_gmem_AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_ADDR_WIDTH-1 downto 0);
    m_axi_gmem_AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_ID_WIDTH-1 downto 0);
    m_axi_gmem_AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_gmem_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_AWUSER_WIDTH-1 downto 0);
    m_axi_gmem_WVALID : OUT STD_LOGIC;
    m_axi_gmem_WREADY : IN STD_LOGIC;
    m_axi_gmem_WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_DATA_WIDTH-1 downto 0);
    m_axi_gmem_WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_DATA_WIDTH/8-1 downto 0);
    m_axi_gmem_WLAST : OUT STD_LOGIC;
    m_axi_gmem_WID : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_ID_WIDTH-1 downto 0);
    m_axi_gmem_WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_WUSER_WIDTH-1 downto 0);
    m_axi_gmem_ARVALID : OUT STD_LOGIC;
    m_axi_gmem_ARREADY : IN STD_LOGIC;
    m_axi_gmem_ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_ADDR_WIDTH-1 downto 0);
    m_axi_gmem_ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_ID_WIDTH-1 downto 0);
    m_axi_gmem_ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_gmem_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_ARUSER_WIDTH-1 downto 0);
    m_axi_gmem_RVALID : IN STD_LOGIC;
    m_axi_gmem_RREADY : OUT STD_LOGIC;
    m_axi_gmem_RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_GMEM_DATA_WIDTH-1 downto 0);
    m_axi_gmem_RLAST : IN STD_LOGIC;
    m_axi_gmem_RID : IN STD_LOGIC_VECTOR (C_M_AXI_GMEM_ID_WIDTH-1 downto 0);
    m_axi_gmem_RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_GMEM_RUSER_WIDTH-1 downto 0);
    m_axi_gmem_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_BVALID : IN STD_LOGIC;
    m_axi_gmem_BREADY : OUT STD_LOGIC;
    m_axi_gmem_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_BID : IN STD_LOGIC_VECTOR (C_M_AXI_GMEM_ID_WIDTH-1 downto 0);
    m_axi_gmem_BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_GMEM_BUSER_WIDTH-1 downto 0);
    in0_V_V_TDATA : IN STD_LOGIC_VECTOR (7 downto 0);
    in0_V_V_TVALID : IN STD_LOGIC;
    in0_V_V_TREADY : OUT STD_LOGIC );
end;


architecture behav of StreamingDataflowPartition_2_IODMA_0_StreamingDataflowPartition_2_IODMA_0 is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "StreamingDataflowPartition_2_IODMA_0_StreamingDataflowPartition_2_IODMA_0,hls_ip_2020_1,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=1,HLS_INPUT_PART=xc7z020-clg400-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=dataflow,HLS_SYN_CLOCK=8.750000,HLS_SYN_LAT=-1,HLS_SYN_TPT=-1,HLS_SYN_MEM=2,HLS_SYN_DSP=0,HLS_SYN_FF=947,HLS_SYN_LUT=1823,HLS_VERSION=2020_1}";
    constant C_S_AXI_DATA_WIDTH : INTEGER range 63 downto 0 := 20;
    constant C_S_AXI_WSTRB_WIDTH : INTEGER range 63 downto 0 := 4;
    constant C_S_AXI_ADDR_WIDTH : INTEGER range 63 downto 0 := 20;
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant C_M_AXI_ID_WIDTH : INTEGER range 63 downto 0 := 1;
    constant C_M_AXI_ADDR_WIDTH : INTEGER range 63 downto 0 := 40;
    constant C_M_AXI_DATA_WIDTH : INTEGER range 63 downto 0 := 20;
    constant C_M_AXI_WSTRB_WIDTH : INTEGER range 63 downto 0 := 4;
    constant C_M_AXI_AWUSER_WIDTH : INTEGER range 63 downto 0 := 1;
    constant C_M_AXI_ARUSER_WIDTH : INTEGER range 63 downto 0 := 1;
    constant C_M_AXI_WUSER_WIDTH : INTEGER range 63 downto 0 := 1;
    constant C_M_AXI_RUSER_WIDTH : INTEGER range 63 downto 0 := 1;
    constant C_M_AXI_BUSER_WIDTH : INTEGER range 63 downto 0 := 1;
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_const_lv64_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv64_1 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000001";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv3_1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv4_1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv8_1 : STD_LOGIC_VECTOR (7 downto 0) := "00000001";

    signal ap_rst_n_inv : STD_LOGIC;
    signal ap_start : STD_LOGIC;
    signal ap_ready : STD_LOGIC;
    signal ap_done : STD_LOGIC;
    signal ap_idle : STD_LOGIC;
    signal out_V : STD_LOGIC_VECTOR (63 downto 0);
    signal numReps : STD_LOGIC_VECTOR (31 downto 0);
    signal gmem_AWREADY : STD_LOGIC;
    signal gmem_WREADY : STD_LOGIC;
    signal gmem_ARREADY : STD_LOGIC;
    signal gmem_RVALID : STD_LOGIC;
    signal gmem_RDATA : STD_LOGIC_VECTOR (7 downto 0);
    signal gmem_RLAST : STD_LOGIC;
    signal gmem_RID : STD_LOGIC_VECTOR (0 downto 0);
    signal gmem_RUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal gmem_RRESP : STD_LOGIC_VECTOR (1 downto 0);
    signal gmem_BVALID : STD_LOGIC;
    signal gmem_BRESP : STD_LOGIC_VECTOR (1 downto 0);
    signal gmem_BID : STD_LOGIC_VECTOR (0 downto 0);
    signal gmem_BUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal Stream2Mem_Batch_U0_ap_start : STD_LOGIC;
    signal Stream2Mem_Batch_U0_ap_done : STD_LOGIC;
    signal Stream2Mem_Batch_U0_ap_continue : STD_LOGIC;
    signal Stream2Mem_Batch_U0_ap_idle : STD_LOGIC;
    signal Stream2Mem_Batch_U0_ap_ready : STD_LOGIC;
    signal Stream2Mem_Batch_U0_in_V_V_TREADY : STD_LOGIC;
    signal Stream2Mem_Batch_U0_m_axi_out_V_AWVALID : STD_LOGIC;
    signal Stream2Mem_Batch_U0_m_axi_out_V_AWADDR : STD_LOGIC_VECTOR (63 downto 0);
    signal Stream2Mem_Batch_U0_m_axi_out_V_AWID : STD_LOGIC_VECTOR (0 downto 0);
    signal Stream2Mem_Batch_U0_m_axi_out_V_AWLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal Stream2Mem_Batch_U0_m_axi_out_V_AWSIZE : STD_LOGIC_VECTOR (2 downto 0);
    signal Stream2Mem_Batch_U0_m_axi_out_V_AWBURST : STD_LOGIC_VECTOR (1 downto 0);
    signal Stream2Mem_Batch_U0_m_axi_out_V_AWLOCK : STD_LOGIC_VECTOR (1 downto 0);
    signal Stream2Mem_Batch_U0_m_axi_out_V_AWCACHE : STD_LOGIC_VECTOR (3 downto 0);
    signal Stream2Mem_Batch_U0_m_axi_out_V_AWPROT : STD_LOGIC_VECTOR (2 downto 0);
    signal Stream2Mem_Batch_U0_m_axi_out_V_AWQOS : STD_LOGIC_VECTOR (3 downto 0);
    signal Stream2Mem_Batch_U0_m_axi_out_V_AWREGION : STD_LOGIC_VECTOR (3 downto 0);
    signal Stream2Mem_Batch_U0_m_axi_out_V_AWUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal Stream2Mem_Batch_U0_m_axi_out_V_WVALID : STD_LOGIC;
    signal Stream2Mem_Batch_U0_m_axi_out_V_WDATA : STD_LOGIC_VECTOR (7 downto 0);
    signal Stream2Mem_Batch_U0_m_axi_out_V_WSTRB : STD_LOGIC_VECTOR (0 downto 0);
    signal Stream2Mem_Batch_U0_m_axi_out_V_WLAST : STD_LOGIC;
    signal Stream2Mem_Batch_U0_m_axi_out_V_WID : STD_LOGIC_VECTOR (0 downto 0);
    signal Stream2Mem_Batch_U0_m_axi_out_V_WUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal Stream2Mem_Batch_U0_m_axi_out_V_ARVALID : STD_LOGIC;
    signal Stream2Mem_Batch_U0_m_axi_out_V_ARADDR : STD_LOGIC_VECTOR (63 downto 0);
    signal Stream2Mem_Batch_U0_m_axi_out_V_ARID : STD_LOGIC_VECTOR (0 downto 0);
    signal Stream2Mem_Batch_U0_m_axi_out_V_ARLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal Stream2Mem_Batch_U0_m_axi_out_V_ARSIZE : STD_LOGIC_VECTOR (2 downto 0);
    signal Stream2Mem_Batch_U0_m_axi_out_V_ARBURST : STD_LOGIC_VECTOR (1 downto 0);
    signal Stream2Mem_Batch_U0_m_axi_out_V_ARLOCK : STD_LOGIC_VECTOR (1 downto 0);
    signal Stream2Mem_Batch_U0_m_axi_out_V_ARCACHE : STD_LOGIC_VECTOR (3 downto 0);
    signal Stream2Mem_Batch_U0_m_axi_out_V_ARPROT : STD_LOGIC_VECTOR (2 downto 0);
    signal Stream2Mem_Batch_U0_m_axi_out_V_ARQOS : STD_LOGIC_VECTOR (3 downto 0);
    signal Stream2Mem_Batch_U0_m_axi_out_V_ARREGION : STD_LOGIC_VECTOR (3 downto 0);
    signal Stream2Mem_Batch_U0_m_axi_out_V_ARUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal Stream2Mem_Batch_U0_m_axi_out_V_RREADY : STD_LOGIC;
    signal Stream2Mem_Batch_U0_m_axi_out_V_BREADY : STD_LOGIC;
    signal ap_sync_continue : STD_LOGIC;
    signal ap_sync_done : STD_LOGIC;
    signal ap_sync_ready : STD_LOGIC;
    signal Stream2Mem_Batch_U0_start_full_n : STD_LOGIC;
    signal Stream2Mem_Batch_U0_start_write : STD_LOGIC;

    component StreamingDataflowPartition_2_IODMA_0_Stream2Mem_Batch IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        in_V_V_TDATA : IN STD_LOGIC_VECTOR (7 downto 0);
        in_V_V_TVALID : IN STD_LOGIC;
        in_V_V_TREADY : OUT STD_LOGIC;
        m_axi_out_V_AWVALID : OUT STD_LOGIC;
        m_axi_out_V_AWREADY : IN STD_LOGIC;
        m_axi_out_V_AWADDR : OUT STD_LOGIC_VECTOR (63 downto 0);
        m_axi_out_V_AWID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_out_V_AWLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_out_V_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_out_V_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_out_V_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_out_V_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_out_V_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_out_V_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_out_V_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_out_V_AWUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_out_V_WVALID : OUT STD_LOGIC;
        m_axi_out_V_WREADY : IN STD_LOGIC;
        m_axi_out_V_WDATA : OUT STD_LOGIC_VECTOR (7 downto 0);
        m_axi_out_V_WSTRB : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_out_V_WLAST : OUT STD_LOGIC;
        m_axi_out_V_WID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_out_V_WUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_out_V_ARVALID : OUT STD_LOGIC;
        m_axi_out_V_ARREADY : IN STD_LOGIC;
        m_axi_out_V_ARADDR : OUT STD_LOGIC_VECTOR (63 downto 0);
        m_axi_out_V_ARID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_out_V_ARLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_out_V_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_out_V_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_out_V_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_out_V_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_out_V_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_out_V_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_out_V_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_out_V_ARUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_out_V_RVALID : IN STD_LOGIC;
        m_axi_out_V_RREADY : OUT STD_LOGIC;
        m_axi_out_V_RDATA : IN STD_LOGIC_VECTOR (7 downto 0);
        m_axi_out_V_RLAST : IN STD_LOGIC;
        m_axi_out_V_RID : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_out_V_RUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_out_V_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        m_axi_out_V_BVALID : IN STD_LOGIC;
        m_axi_out_V_BREADY : OUT STD_LOGIC;
        m_axi_out_V_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        m_axi_out_V_BID : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_out_V_BUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        out_V_offset : IN STD_LOGIC_VECTOR (63 downto 0);
        numReps : IN STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component StreamingDataflowPartition_2_IODMA_0_StreamingDataflowPartition_2_IODMA_0_control_s_axi IS
    generic (
        C_S_AXI_ADDR_WIDTH : INTEGER;
        C_S_AXI_DATA_WIDTH : INTEGER );
    port (
        AWVALID : IN STD_LOGIC;
        AWREADY : OUT STD_LOGIC;
        AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        WVALID : IN STD_LOGIC;
        WREADY : OUT STD_LOGIC;
        WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH/8-1 downto 0);
        ARVALID : IN STD_LOGIC;
        ARREADY : OUT STD_LOGIC;
        ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        RVALID : OUT STD_LOGIC;
        RREADY : IN STD_LOGIC;
        RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        BVALID : OUT STD_LOGIC;
        BREADY : IN STD_LOGIC;
        BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        ap_start : OUT STD_LOGIC;
        interrupt : OUT STD_LOGIC;
        ap_ready : IN STD_LOGIC;
        ap_done : IN STD_LOGIC;
        ap_idle : IN STD_LOGIC;
        out_V : OUT STD_LOGIC_VECTOR (63 downto 0);
        numReps : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component StreamingDataflowPartition_2_IODMA_0_StreamingDataflowPartition_2_IODMA_0_gmem_m_axi IS
    generic (
        CONSERVATIVE : INTEGER;
        USER_DW : INTEGER;
        USER_AW : INTEGER;
        USER_MAXREQS : INTEGER;
        NUM_READ_OUTSTANDING : INTEGER;
        NUM_WRITE_OUTSTANDING : INTEGER;
        MAX_READ_BURST_LENGTH : INTEGER;
        MAX_WRITE_BURST_LENGTH : INTEGER;
        C_M_AXI_ID_WIDTH : INTEGER;
        C_M_AXI_ADDR_WIDTH : INTEGER;
        C_M_AXI_DATA_WIDTH : INTEGER;
        C_M_AXI_AWUSER_WIDTH : INTEGER;
        C_M_AXI_ARUSER_WIDTH : INTEGER;
        C_M_AXI_WUSER_WIDTH : INTEGER;
        C_M_AXI_RUSER_WIDTH : INTEGER;
        C_M_AXI_BUSER_WIDTH : INTEGER;
        C_USER_VALUE : INTEGER;
        C_PROT_VALUE : INTEGER;
        C_CACHE_VALUE : INTEGER );
    port (
        AWVALID : OUT STD_LOGIC;
        AWREADY : IN STD_LOGIC;
        AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_AWUSER_WIDTH-1 downto 0);
        WVALID : OUT STD_LOGIC;
        WREADY : IN STD_LOGIC;
        WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH/8-1 downto 0);
        WLAST : OUT STD_LOGIC;
        WID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_WUSER_WIDTH-1 downto 0);
        ARVALID : OUT STD_LOGIC;
        ARREADY : IN STD_LOGIC;
        ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_ARUSER_WIDTH-1 downto 0);
        RVALID : IN STD_LOGIC;
        RREADY : OUT STD_LOGIC;
        RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        RLAST : IN STD_LOGIC;
        RID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_RUSER_WIDTH-1 downto 0);
        RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BVALID : IN STD_LOGIC;
        BREADY : OUT STD_LOGIC;
        BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_BUSER_WIDTH-1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        I_ARVALID : IN STD_LOGIC;
        I_ARREADY : OUT STD_LOGIC;
        I_ARADDR : IN STD_LOGIC_VECTOR (63 downto 0);
        I_ARID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_ARLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_ARSIZE : IN STD_LOGIC_VECTOR (2 downto 0);
        I_ARLOCK : IN STD_LOGIC_VECTOR (1 downto 0);
        I_ARCACHE : IN STD_LOGIC_VECTOR (3 downto 0);
        I_ARQOS : IN STD_LOGIC_VECTOR (3 downto 0);
        I_ARPROT : IN STD_LOGIC_VECTOR (2 downto 0);
        I_ARUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_ARBURST : IN STD_LOGIC_VECTOR (1 downto 0);
        I_ARREGION : IN STD_LOGIC_VECTOR (3 downto 0);
        I_RVALID : OUT STD_LOGIC;
        I_RREADY : IN STD_LOGIC;
        I_RDATA : OUT STD_LOGIC_VECTOR (7 downto 0);
        I_RID : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_RUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        I_RLAST : OUT STD_LOGIC;
        I_AWVALID : IN STD_LOGIC;
        I_AWREADY : OUT STD_LOGIC;
        I_AWADDR : IN STD_LOGIC_VECTOR (63 downto 0);
        I_AWID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_AWLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_AWSIZE : IN STD_LOGIC_VECTOR (2 downto 0);
        I_AWLOCK : IN STD_LOGIC_VECTOR (1 downto 0);
        I_AWCACHE : IN STD_LOGIC_VECTOR (3 downto 0);
        I_AWQOS : IN STD_LOGIC_VECTOR (3 downto 0);
        I_AWPROT : IN STD_LOGIC_VECTOR (2 downto 0);
        I_AWUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_AWBURST : IN STD_LOGIC_VECTOR (1 downto 0);
        I_AWREGION : IN STD_LOGIC_VECTOR (3 downto 0);
        I_WVALID : IN STD_LOGIC;
        I_WREADY : OUT STD_LOGIC;
        I_WDATA : IN STD_LOGIC_VECTOR (7 downto 0);
        I_WID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_WUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_WLAST : IN STD_LOGIC;
        I_WSTRB : IN STD_LOGIC_VECTOR (0 downto 0);
        I_BVALID : OUT STD_LOGIC;
        I_BREADY : IN STD_LOGIC;
        I_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        I_BID : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_BUSER : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;



begin
    StreamingDataflowPartition_2_IODMA_0_control_s_axi_U : component StreamingDataflowPartition_2_IODMA_0_StreamingDataflowPartition_2_IODMA_0_control_s_axi
    generic map (
        C_S_AXI_ADDR_WIDTH => C_S_AXI_CONTROL_ADDR_WIDTH,
        C_S_AXI_DATA_WIDTH => C_S_AXI_CONTROL_DATA_WIDTH)
    port map (
        AWVALID => s_axi_control_AWVALID,
        AWREADY => s_axi_control_AWREADY,
        AWADDR => s_axi_control_AWADDR,
        WVALID => s_axi_control_WVALID,
        WREADY => s_axi_control_WREADY,
        WDATA => s_axi_control_WDATA,
        WSTRB => s_axi_control_WSTRB,
        ARVALID => s_axi_control_ARVALID,
        ARREADY => s_axi_control_ARREADY,
        ARADDR => s_axi_control_ARADDR,
        RVALID => s_axi_control_RVALID,
        RREADY => s_axi_control_RREADY,
        RDATA => s_axi_control_RDATA,
        RRESP => s_axi_control_RRESP,
        BVALID => s_axi_control_BVALID,
        BREADY => s_axi_control_BREADY,
        BRESP => s_axi_control_BRESP,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        ap_start => ap_start,
        interrupt => interrupt,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_idle => ap_idle,
        out_V => out_V,
        numReps => numReps);

    StreamingDataflowPartition_2_IODMA_0_gmem_m_axi_U : component StreamingDataflowPartition_2_IODMA_0_StreamingDataflowPartition_2_IODMA_0_gmem_m_axi
    generic map (
        CONSERVATIVE => 0,
        USER_DW => 8,
        USER_AW => 64,
        USER_MAXREQS => 5,
        NUM_READ_OUTSTANDING => 16,
        NUM_WRITE_OUTSTANDING => 16,
        MAX_READ_BURST_LENGTH => 16,
        MAX_WRITE_BURST_LENGTH => 16,
        C_M_AXI_ID_WIDTH => C_M_AXI_GMEM_ID_WIDTH,
        C_M_AXI_ADDR_WIDTH => C_M_AXI_GMEM_ADDR_WIDTH,
        C_M_AXI_DATA_WIDTH => C_M_AXI_GMEM_DATA_WIDTH,
        C_M_AXI_AWUSER_WIDTH => C_M_AXI_GMEM_AWUSER_WIDTH,
        C_M_AXI_ARUSER_WIDTH => C_M_AXI_GMEM_ARUSER_WIDTH,
        C_M_AXI_WUSER_WIDTH => C_M_AXI_GMEM_WUSER_WIDTH,
        C_M_AXI_RUSER_WIDTH => C_M_AXI_GMEM_RUSER_WIDTH,
        C_M_AXI_BUSER_WIDTH => C_M_AXI_GMEM_BUSER_WIDTH,
        C_USER_VALUE => C_M_AXI_GMEM_USER_VALUE,
        C_PROT_VALUE => C_M_AXI_GMEM_PROT_VALUE,
        C_CACHE_VALUE => C_M_AXI_GMEM_CACHE_VALUE)
    port map (
        AWVALID => m_axi_gmem_AWVALID,
        AWREADY => m_axi_gmem_AWREADY,
        AWADDR => m_axi_gmem_AWADDR,
        AWID => m_axi_gmem_AWID,
        AWLEN => m_axi_gmem_AWLEN,
        AWSIZE => m_axi_gmem_AWSIZE,
        AWBURST => m_axi_gmem_AWBURST,
        AWLOCK => m_axi_gmem_AWLOCK,
        AWCACHE => m_axi_gmem_AWCACHE,
        AWPROT => m_axi_gmem_AWPROT,
        AWQOS => m_axi_gmem_AWQOS,
        AWREGION => m_axi_gmem_AWREGION,
        AWUSER => m_axi_gmem_AWUSER,
        WVALID => m_axi_gmem_WVALID,
        WREADY => m_axi_gmem_WREADY,
        WDATA => m_axi_gmem_WDATA,
        WSTRB => m_axi_gmem_WSTRB,
        WLAST => m_axi_gmem_WLAST,
        WID => m_axi_gmem_WID,
        WUSER => m_axi_gmem_WUSER,
        ARVALID => m_axi_gmem_ARVALID,
        ARREADY => m_axi_gmem_ARREADY,
        ARADDR => m_axi_gmem_ARADDR,
        ARID => m_axi_gmem_ARID,
        ARLEN => m_axi_gmem_ARLEN,
        ARSIZE => m_axi_gmem_ARSIZE,
        ARBURST => m_axi_gmem_ARBURST,
        ARLOCK => m_axi_gmem_ARLOCK,
        ARCACHE => m_axi_gmem_ARCACHE,
        ARPROT => m_axi_gmem_ARPROT,
        ARQOS => m_axi_gmem_ARQOS,
        ARREGION => m_axi_gmem_ARREGION,
        ARUSER => m_axi_gmem_ARUSER,
        RVALID => m_axi_gmem_RVALID,
        RREADY => m_axi_gmem_RREADY,
        RDATA => m_axi_gmem_RDATA,
        RLAST => m_axi_gmem_RLAST,
        RID => m_axi_gmem_RID,
        RUSER => m_axi_gmem_RUSER,
        RRESP => m_axi_gmem_RRESP,
        BVALID => m_axi_gmem_BVALID,
        BREADY => m_axi_gmem_BREADY,
        BRESP => m_axi_gmem_BRESP,
        BID => m_axi_gmem_BID,
        BUSER => m_axi_gmem_BUSER,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        I_ARVALID => ap_const_logic_0,
        I_ARREADY => gmem_ARREADY,
        I_ARADDR => ap_const_lv64_0,
        I_ARID => ap_const_lv1_0,
        I_ARLEN => ap_const_lv32_0,
        I_ARSIZE => ap_const_lv3_0,
        I_ARLOCK => ap_const_lv2_0,
        I_ARCACHE => ap_const_lv4_0,
        I_ARQOS => ap_const_lv4_0,
        I_ARPROT => ap_const_lv3_0,
        I_ARUSER => ap_const_lv1_0,
        I_ARBURST => ap_const_lv2_0,
        I_ARREGION => ap_const_lv4_0,
        I_RVALID => gmem_RVALID,
        I_RREADY => ap_const_logic_0,
        I_RDATA => gmem_RDATA,
        I_RID => gmem_RID,
        I_RUSER => gmem_RUSER,
        I_RRESP => gmem_RRESP,
        I_RLAST => gmem_RLAST,
        I_AWVALID => Stream2Mem_Batch_U0_m_axi_out_V_AWVALID,
        I_AWREADY => gmem_AWREADY,
        I_AWADDR => Stream2Mem_Batch_U0_m_axi_out_V_AWADDR,
        I_AWID => Stream2Mem_Batch_U0_m_axi_out_V_AWID,
        I_AWLEN => Stream2Mem_Batch_U0_m_axi_out_V_AWLEN,
        I_AWSIZE => Stream2Mem_Batch_U0_m_axi_out_V_AWSIZE,
        I_AWLOCK => Stream2Mem_Batch_U0_m_axi_out_V_AWLOCK,
        I_AWCACHE => Stream2Mem_Batch_U0_m_axi_out_V_AWCACHE,
        I_AWQOS => Stream2Mem_Batch_U0_m_axi_out_V_AWQOS,
        I_AWPROT => Stream2Mem_Batch_U0_m_axi_out_V_AWPROT,
        I_AWUSER => Stream2Mem_Batch_U0_m_axi_out_V_AWUSER,
        I_AWBURST => Stream2Mem_Batch_U0_m_axi_out_V_AWBURST,
        I_AWREGION => Stream2Mem_Batch_U0_m_axi_out_V_AWREGION,
        I_WVALID => Stream2Mem_Batch_U0_m_axi_out_V_WVALID,
        I_WREADY => gmem_WREADY,
        I_WDATA => Stream2Mem_Batch_U0_m_axi_out_V_WDATA,
        I_WID => Stream2Mem_Batch_U0_m_axi_out_V_WID,
        I_WUSER => Stream2Mem_Batch_U0_m_axi_out_V_WUSER,
        I_WLAST => Stream2Mem_Batch_U0_m_axi_out_V_WLAST,
        I_WSTRB => Stream2Mem_Batch_U0_m_axi_out_V_WSTRB,
        I_BVALID => gmem_BVALID,
        I_BREADY => Stream2Mem_Batch_U0_m_axi_out_V_BREADY,
        I_BRESP => gmem_BRESP,
        I_BID => gmem_BID,
        I_BUSER => gmem_BUSER);

    Stream2Mem_Batch_U0 : component StreamingDataflowPartition_2_IODMA_0_Stream2Mem_Batch
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => Stream2Mem_Batch_U0_ap_start,
        ap_done => Stream2Mem_Batch_U0_ap_done,
        ap_continue => Stream2Mem_Batch_U0_ap_continue,
        ap_idle => Stream2Mem_Batch_U0_ap_idle,
        ap_ready => Stream2Mem_Batch_U0_ap_ready,
        in_V_V_TDATA => in0_V_V_TDATA,
        in_V_V_TVALID => in0_V_V_TVALID,
        in_V_V_TREADY => Stream2Mem_Batch_U0_in_V_V_TREADY,
        m_axi_out_V_AWVALID => Stream2Mem_Batch_U0_m_axi_out_V_AWVALID,
        m_axi_out_V_AWREADY => gmem_AWREADY,
        m_axi_out_V_AWADDR => Stream2Mem_Batch_U0_m_axi_out_V_AWADDR,
        m_axi_out_V_AWID => Stream2Mem_Batch_U0_m_axi_out_V_AWID,
        m_axi_out_V_AWLEN => Stream2Mem_Batch_U0_m_axi_out_V_AWLEN,
        m_axi_out_V_AWSIZE => Stream2Mem_Batch_U0_m_axi_out_V_AWSIZE,
        m_axi_out_V_AWBURST => Stream2Mem_Batch_U0_m_axi_out_V_AWBURST,
        m_axi_out_V_AWLOCK => Stream2Mem_Batch_U0_m_axi_out_V_AWLOCK,
        m_axi_out_V_AWCACHE => Stream2Mem_Batch_U0_m_axi_out_V_AWCACHE,
        m_axi_out_V_AWPROT => Stream2Mem_Batch_U0_m_axi_out_V_AWPROT,
        m_axi_out_V_AWQOS => Stream2Mem_Batch_U0_m_axi_out_V_AWQOS,
        m_axi_out_V_AWREGION => Stream2Mem_Batch_U0_m_axi_out_V_AWREGION,
        m_axi_out_V_AWUSER => Stream2Mem_Batch_U0_m_axi_out_V_AWUSER,
        m_axi_out_V_WVALID => Stream2Mem_Batch_U0_m_axi_out_V_WVALID,
        m_axi_out_V_WREADY => gmem_WREADY,
        m_axi_out_V_WDATA => Stream2Mem_Batch_U0_m_axi_out_V_WDATA,
        m_axi_out_V_WSTRB => Stream2Mem_Batch_U0_m_axi_out_V_WSTRB,
        m_axi_out_V_WLAST => Stream2Mem_Batch_U0_m_axi_out_V_WLAST,
        m_axi_out_V_WID => Stream2Mem_Batch_U0_m_axi_out_V_WID,
        m_axi_out_V_WUSER => Stream2Mem_Batch_U0_m_axi_out_V_WUSER,
        m_axi_out_V_ARVALID => Stream2Mem_Batch_U0_m_axi_out_V_ARVALID,
        m_axi_out_V_ARREADY => ap_const_logic_0,
        m_axi_out_V_ARADDR => Stream2Mem_Batch_U0_m_axi_out_V_ARADDR,
        m_axi_out_V_ARID => Stream2Mem_Batch_U0_m_axi_out_V_ARID,
        m_axi_out_V_ARLEN => Stream2Mem_Batch_U0_m_axi_out_V_ARLEN,
        m_axi_out_V_ARSIZE => Stream2Mem_Batch_U0_m_axi_out_V_ARSIZE,
        m_axi_out_V_ARBURST => Stream2Mem_Batch_U0_m_axi_out_V_ARBURST,
        m_axi_out_V_ARLOCK => Stream2Mem_Batch_U0_m_axi_out_V_ARLOCK,
        m_axi_out_V_ARCACHE => Stream2Mem_Batch_U0_m_axi_out_V_ARCACHE,
        m_axi_out_V_ARPROT => Stream2Mem_Batch_U0_m_axi_out_V_ARPROT,
        m_axi_out_V_ARQOS => Stream2Mem_Batch_U0_m_axi_out_V_ARQOS,
        m_axi_out_V_ARREGION => Stream2Mem_Batch_U0_m_axi_out_V_ARREGION,
        m_axi_out_V_ARUSER => Stream2Mem_Batch_U0_m_axi_out_V_ARUSER,
        m_axi_out_V_RVALID => ap_const_logic_0,
        m_axi_out_V_RREADY => Stream2Mem_Batch_U0_m_axi_out_V_RREADY,
        m_axi_out_V_RDATA => ap_const_lv8_0,
        m_axi_out_V_RLAST => ap_const_logic_0,
        m_axi_out_V_RID => ap_const_lv1_0,
        m_axi_out_V_RUSER => ap_const_lv1_0,
        m_axi_out_V_RRESP => ap_const_lv2_0,
        m_axi_out_V_BVALID => gmem_BVALID,
        m_axi_out_V_BREADY => Stream2Mem_Batch_U0_m_axi_out_V_BREADY,
        m_axi_out_V_BRESP => gmem_BRESP,
        m_axi_out_V_BID => gmem_BID,
        m_axi_out_V_BUSER => gmem_BUSER,
        out_V_offset => out_V,
        numReps => numReps);




    Stream2Mem_Batch_U0_ap_continue <= ap_const_logic_1;
    Stream2Mem_Batch_U0_ap_start <= ap_start;
    Stream2Mem_Batch_U0_start_full_n <= ap_const_logic_1;
    Stream2Mem_Batch_U0_start_write <= ap_const_logic_0;
    ap_done <= Stream2Mem_Batch_U0_ap_done;
    ap_idle <= Stream2Mem_Batch_U0_ap_idle;
    ap_ready <= Stream2Mem_Batch_U0_ap_ready;

    ap_rst_n_inv_assign_proc : process(ap_rst_n)
    begin
                ap_rst_n_inv <= not(ap_rst_n);
    end process;

    ap_sync_continue <= ap_const_logic_1;
    ap_sync_done <= Stream2Mem_Batch_U0_ap_done;
    ap_sync_ready <= Stream2Mem_Batch_U0_ap_ready;
    in0_V_V_TREADY <= Stream2Mem_Batch_U0_in_V_V_TREADY;
end behav;
