// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2020.1
// Copyright (C) 1986-2020 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#ifndef _StreamingDataflowPartition_2_IODMA_0_StreamingDataflowPartition_2_IODMA_0_HH_
#define _StreamingDataflowPartition_2_IODMA_0_StreamingDataflowPartition_2_IODMA_0_HH_

#include "systemc.h"
#include "AESL_pkg.h"

#include "StreamingDataflowPartition_2_IODMA_0_Stream2Mem_Batch.h"
#include "StreamingDataflowPartition_2_IODMA_0_StreamingDataflowPartition_2_IODMA_0_control_s_axi.h"
#include "StreamingDataflowPartition_2_IODMA_0_StreamingDataflowPartition_2_IODMA_0_gmem_m_axi.h"

namespace ap_rtl {

template<unsigned int C_S_AXI_CONTROL_ADDR_WIDTH = 6,
         unsigned int C_S_AXI_CONTROL_DATA_WIDTH = 32,
         unsigned int C_M_AXI_GMEM_ADDR_WIDTH = 64,
         unsigned int C_M_AXI_GMEM_ID_WIDTH = 1,
         unsigned int C_M_AXI_GMEM_AWUSER_WIDTH = 1,
         unsigned int C_M_AXI_GMEM_DATA_WIDTH = 32,
         unsigned int C_M_AXI_GMEM_WUSER_WIDTH = 1,
         unsigned int C_M_AXI_GMEM_ARUSER_WIDTH = 1,
         unsigned int C_M_AXI_GMEM_RUSER_WIDTH = 1,
         unsigned int C_M_AXI_GMEM_BUSER_WIDTH = 1>
struct StreamingDataflowPartition_2_IODMA_0_StreamingDataflowPartition_2_IODMA_0 : public sc_module {
    // Port declarations 68
    sc_in< sc_logic > s_axi_control_AWVALID;
    sc_out< sc_logic > s_axi_control_AWREADY;
    sc_in< sc_uint<C_S_AXI_CONTROL_ADDR_WIDTH> > s_axi_control_AWADDR;
    sc_in< sc_logic > s_axi_control_WVALID;
    sc_out< sc_logic > s_axi_control_WREADY;
    sc_in< sc_uint<C_S_AXI_CONTROL_DATA_WIDTH> > s_axi_control_WDATA;
    sc_in< sc_uint<C_S_AXI_CONTROL_DATA_WIDTH/8> > s_axi_control_WSTRB;
    sc_in< sc_logic > s_axi_control_ARVALID;
    sc_out< sc_logic > s_axi_control_ARREADY;
    sc_in< sc_uint<C_S_AXI_CONTROL_ADDR_WIDTH> > s_axi_control_ARADDR;
    sc_out< sc_logic > s_axi_control_RVALID;
    sc_in< sc_logic > s_axi_control_RREADY;
    sc_out< sc_uint<C_S_AXI_CONTROL_DATA_WIDTH> > s_axi_control_RDATA;
    sc_out< sc_lv<2> > s_axi_control_RRESP;
    sc_out< sc_logic > s_axi_control_BVALID;
    sc_in< sc_logic > s_axi_control_BREADY;
    sc_out< sc_lv<2> > s_axi_control_BRESP;
    sc_in_clk ap_clk;
    sc_in< sc_logic > ap_rst_n;
    sc_out< sc_logic > interrupt;
    sc_out< sc_logic > m_axi_gmem_AWVALID;
    sc_in< sc_logic > m_axi_gmem_AWREADY;
    sc_out< sc_uint<C_M_AXI_GMEM_ADDR_WIDTH> > m_axi_gmem_AWADDR;
    sc_out< sc_uint<C_M_AXI_GMEM_ID_WIDTH> > m_axi_gmem_AWID;
    sc_out< sc_lv<8> > m_axi_gmem_AWLEN;
    sc_out< sc_lv<3> > m_axi_gmem_AWSIZE;
    sc_out< sc_lv<2> > m_axi_gmem_AWBURST;
    sc_out< sc_lv<2> > m_axi_gmem_AWLOCK;
    sc_out< sc_lv<4> > m_axi_gmem_AWCACHE;
    sc_out< sc_lv<3> > m_axi_gmem_AWPROT;
    sc_out< sc_lv<4> > m_axi_gmem_AWQOS;
    sc_out< sc_lv<4> > m_axi_gmem_AWREGION;
    sc_out< sc_uint<C_M_AXI_GMEM_AWUSER_WIDTH> > m_axi_gmem_AWUSER;
    sc_out< sc_logic > m_axi_gmem_WVALID;
    sc_in< sc_logic > m_axi_gmem_WREADY;
    sc_out< sc_uint<C_M_AXI_GMEM_DATA_WIDTH> > m_axi_gmem_WDATA;
    sc_out< sc_uint<C_M_AXI_GMEM_DATA_WIDTH/8> > m_axi_gmem_WSTRB;
    sc_out< sc_logic > m_axi_gmem_WLAST;
    sc_out< sc_uint<C_M_AXI_GMEM_ID_WIDTH> > m_axi_gmem_WID;
    sc_out< sc_uint<C_M_AXI_GMEM_WUSER_WIDTH> > m_axi_gmem_WUSER;
    sc_out< sc_logic > m_axi_gmem_ARVALID;
    sc_in< sc_logic > m_axi_gmem_ARREADY;
    sc_out< sc_uint<C_M_AXI_GMEM_ADDR_WIDTH> > m_axi_gmem_ARADDR;
    sc_out< sc_uint<C_M_AXI_GMEM_ID_WIDTH> > m_axi_gmem_ARID;
    sc_out< sc_lv<8> > m_axi_gmem_ARLEN;
    sc_out< sc_lv<3> > m_axi_gmem_ARSIZE;
    sc_out< sc_lv<2> > m_axi_gmem_ARBURST;
    sc_out< sc_lv<2> > m_axi_gmem_ARLOCK;
    sc_out< sc_lv<4> > m_axi_gmem_ARCACHE;
    sc_out< sc_lv<3> > m_axi_gmem_ARPROT;
    sc_out< sc_lv<4> > m_axi_gmem_ARQOS;
    sc_out< sc_lv<4> > m_axi_gmem_ARREGION;
    sc_out< sc_uint<C_M_AXI_GMEM_ARUSER_WIDTH> > m_axi_gmem_ARUSER;
    sc_in< sc_logic > m_axi_gmem_RVALID;
    sc_out< sc_logic > m_axi_gmem_RREADY;
    sc_in< sc_uint<C_M_AXI_GMEM_DATA_WIDTH> > m_axi_gmem_RDATA;
    sc_in< sc_logic > m_axi_gmem_RLAST;
    sc_in< sc_uint<C_M_AXI_GMEM_ID_WIDTH> > m_axi_gmem_RID;
    sc_in< sc_uint<C_M_AXI_GMEM_RUSER_WIDTH> > m_axi_gmem_RUSER;
    sc_in< sc_lv<2> > m_axi_gmem_RRESP;
    sc_in< sc_logic > m_axi_gmem_BVALID;
    sc_out< sc_logic > m_axi_gmem_BREADY;
    sc_in< sc_lv<2> > m_axi_gmem_BRESP;
    sc_in< sc_uint<C_M_AXI_GMEM_ID_WIDTH> > m_axi_gmem_BID;
    sc_in< sc_uint<C_M_AXI_GMEM_BUSER_WIDTH> > m_axi_gmem_BUSER;
    sc_in< sc_lv<8> > in0_V_V_TDATA;
    sc_in< sc_logic > in0_V_V_TVALID;
    sc_out< sc_logic > in0_V_V_TREADY;
    sc_signal< sc_logic > ap_var_for_const0;
    sc_signal< sc_logic > ap_var_for_const1;
    sc_signal< sc_lv<64> > ap_var_for_const2;
    sc_signal< sc_lv<1> > ap_var_for_const3;
    sc_signal< sc_lv<32> > ap_var_for_const4;
    sc_signal< sc_lv<3> > ap_var_for_const5;
    sc_signal< sc_lv<2> > ap_var_for_const6;
    sc_signal< sc_lv<4> > ap_var_for_const7;
    sc_signal< sc_lv<8> > ap_var_for_const8;


    // Module declarations
    StreamingDataflowPartition_2_IODMA_0_StreamingDataflowPartition_2_IODMA_0(sc_module_name name);
    SC_HAS_PROCESS(StreamingDataflowPartition_2_IODMA_0_StreamingDataflowPartition_2_IODMA_0);

    ~StreamingDataflowPartition_2_IODMA_0_StreamingDataflowPartition_2_IODMA_0();

    sc_trace_file* mVcdFile;

    ofstream mHdltvinHandle;
    ofstream mHdltvoutHandle;
    StreamingDataflowPartition_2_IODMA_0_StreamingDataflowPartition_2_IODMA_0_control_s_axi<C_S_AXI_CONTROL_ADDR_WIDTH,C_S_AXI_CONTROL_DATA_WIDTH>* StreamingDataflowPartition_2_IODMA_0_control_s_axi_U;
    StreamingDataflowPartition_2_IODMA_0_StreamingDataflowPartition_2_IODMA_0_gmem_m_axi<0,8,64,5,16,16,16,16,C_M_AXI_GMEM_ID_WIDTH,C_M_AXI_GMEM_ADDR_WIDTH,C_M_AXI_GMEM_DATA_WIDTH,C_M_AXI_GMEM_AWUSER_WIDTH,C_M_AXI_GMEM_ARUSER_WIDTH,C_M_AXI_GMEM_WUSER_WIDTH,C_M_AXI_GMEM_RUSER_WIDTH,C_M_AXI_GMEM_BUSER_WIDTH,C_M_AXI_GMEM_USER_VALUE,C_M_AXI_GMEM_PROT_VALUE,C_M_AXI_GMEM_CACHE_VALUE>* StreamingDataflowPartition_2_IODMA_0_gmem_m_axi_U;
    StreamingDataflowPartition_2_IODMA_0_Stream2Mem_Batch* Stream2Mem_Batch_U0;
    sc_signal< sc_logic > ap_rst_n_inv;
    sc_signal< sc_logic > ap_start;
    sc_signal< sc_logic > ap_ready;
    sc_signal< sc_logic > ap_done;
    sc_signal< sc_logic > ap_idle;
    sc_signal< sc_lv<64> > out_V;
    sc_signal< sc_lv<32> > numReps;
    sc_signal< sc_logic > gmem_AWREADY;
    sc_signal< sc_logic > gmem_WREADY;
    sc_signal< sc_logic > gmem_ARREADY;
    sc_signal< sc_logic > gmem_RVALID;
    sc_signal< sc_lv<8> > gmem_RDATA;
    sc_signal< sc_logic > gmem_RLAST;
    sc_signal< sc_lv<1> > gmem_RID;
    sc_signal< sc_lv<1> > gmem_RUSER;
    sc_signal< sc_lv<2> > gmem_RRESP;
    sc_signal< sc_logic > gmem_BVALID;
    sc_signal< sc_lv<2> > gmem_BRESP;
    sc_signal< sc_lv<1> > gmem_BID;
    sc_signal< sc_lv<1> > gmem_BUSER;
    sc_signal< sc_logic > Stream2Mem_Batch_U0_ap_start;
    sc_signal< sc_logic > Stream2Mem_Batch_U0_ap_done;
    sc_signal< sc_logic > Stream2Mem_Batch_U0_ap_continue;
    sc_signal< sc_logic > Stream2Mem_Batch_U0_ap_idle;
    sc_signal< sc_logic > Stream2Mem_Batch_U0_ap_ready;
    sc_signal< sc_logic > Stream2Mem_Batch_U0_in_V_V_TREADY;
    sc_signal< sc_logic > Stream2Mem_Batch_U0_m_axi_out_V_AWVALID;
    sc_signal< sc_lv<64> > Stream2Mem_Batch_U0_m_axi_out_V_AWADDR;
    sc_signal< sc_lv<1> > Stream2Mem_Batch_U0_m_axi_out_V_AWID;
    sc_signal< sc_lv<32> > Stream2Mem_Batch_U0_m_axi_out_V_AWLEN;
    sc_signal< sc_lv<3> > Stream2Mem_Batch_U0_m_axi_out_V_AWSIZE;
    sc_signal< sc_lv<2> > Stream2Mem_Batch_U0_m_axi_out_V_AWBURST;
    sc_signal< sc_lv<2> > Stream2Mem_Batch_U0_m_axi_out_V_AWLOCK;
    sc_signal< sc_lv<4> > Stream2Mem_Batch_U0_m_axi_out_V_AWCACHE;
    sc_signal< sc_lv<3> > Stream2Mem_Batch_U0_m_axi_out_V_AWPROT;
    sc_signal< sc_lv<4> > Stream2Mem_Batch_U0_m_axi_out_V_AWQOS;
    sc_signal< sc_lv<4> > Stream2Mem_Batch_U0_m_axi_out_V_AWREGION;
    sc_signal< sc_lv<1> > Stream2Mem_Batch_U0_m_axi_out_V_AWUSER;
    sc_signal< sc_logic > Stream2Mem_Batch_U0_m_axi_out_V_WVALID;
    sc_signal< sc_lv<8> > Stream2Mem_Batch_U0_m_axi_out_V_WDATA;
    sc_signal< sc_lv<1> > Stream2Mem_Batch_U0_m_axi_out_V_WSTRB;
    sc_signal< sc_logic > Stream2Mem_Batch_U0_m_axi_out_V_WLAST;
    sc_signal< sc_lv<1> > Stream2Mem_Batch_U0_m_axi_out_V_WID;
    sc_signal< sc_lv<1> > Stream2Mem_Batch_U0_m_axi_out_V_WUSER;
    sc_signal< sc_logic > Stream2Mem_Batch_U0_m_axi_out_V_ARVALID;
    sc_signal< sc_lv<64> > Stream2Mem_Batch_U0_m_axi_out_V_ARADDR;
    sc_signal< sc_lv<1> > Stream2Mem_Batch_U0_m_axi_out_V_ARID;
    sc_signal< sc_lv<32> > Stream2Mem_Batch_U0_m_axi_out_V_ARLEN;
    sc_signal< sc_lv<3> > Stream2Mem_Batch_U0_m_axi_out_V_ARSIZE;
    sc_signal< sc_lv<2> > Stream2Mem_Batch_U0_m_axi_out_V_ARBURST;
    sc_signal< sc_lv<2> > Stream2Mem_Batch_U0_m_axi_out_V_ARLOCK;
    sc_signal< sc_lv<4> > Stream2Mem_Batch_U0_m_axi_out_V_ARCACHE;
    sc_signal< sc_lv<3> > Stream2Mem_Batch_U0_m_axi_out_V_ARPROT;
    sc_signal< sc_lv<4> > Stream2Mem_Batch_U0_m_axi_out_V_ARQOS;
    sc_signal< sc_lv<4> > Stream2Mem_Batch_U0_m_axi_out_V_ARREGION;
    sc_signal< sc_lv<1> > Stream2Mem_Batch_U0_m_axi_out_V_ARUSER;
    sc_signal< sc_logic > Stream2Mem_Batch_U0_m_axi_out_V_RREADY;
    sc_signal< sc_logic > Stream2Mem_Batch_U0_m_axi_out_V_BREADY;
    sc_signal< sc_logic > ap_sync_continue;
    sc_signal< sc_logic > ap_sync_done;
    sc_signal< sc_logic > ap_sync_ready;
    sc_signal< sc_logic > Stream2Mem_Batch_U0_start_full_n;
    sc_signal< sc_logic > Stream2Mem_Batch_U0_start_write;
    static const int C_S_AXI_DATA_WIDTH;
    static const int C_S_AXI_WSTRB_WIDTH;
    static const int C_S_AXI_ADDR_WIDTH;
    static const sc_logic ap_const_logic_1;
    static const int C_M_AXI_GMEM_USER_VALUE;
    static const int C_M_AXI_GMEM_PROT_VALUE;
    static const int C_M_AXI_GMEM_CACHE_VALUE;
    static const int C_M_AXI_ID_WIDTH;
    static const int C_M_AXI_ADDR_WIDTH;
    static const int C_M_AXI_DATA_WIDTH;
    static const int C_M_AXI_WSTRB_WIDTH;
    static const int C_M_AXI_AWUSER_WIDTH;
    static const int C_M_AXI_ARUSER_WIDTH;
    static const int C_M_AXI_WUSER_WIDTH;
    static const int C_M_AXI_RUSER_WIDTH;
    static const int C_M_AXI_BUSER_WIDTH;
    static const sc_logic ap_const_logic_0;
    static const sc_lv<64> ap_const_lv64_0;
    static const sc_lv<64> ap_const_lv64_1;
    static const sc_lv<1> ap_const_lv1_0;
    static const sc_lv<1> ap_const_lv1_1;
    static const sc_lv<32> ap_const_lv32_0;
    static const sc_lv<32> ap_const_lv32_1;
    static const sc_lv<3> ap_const_lv3_0;
    static const sc_lv<3> ap_const_lv3_1;
    static const sc_lv<2> ap_const_lv2_0;
    static const sc_lv<2> ap_const_lv2_1;
    static const sc_lv<4> ap_const_lv4_0;
    static const sc_lv<4> ap_const_lv4_1;
    static const sc_lv<8> ap_const_lv8_0;
    static const sc_lv<8> ap_const_lv8_1;
    // Thread declarations
    void thread_ap_var_for_const0();
    void thread_ap_var_for_const1();
    void thread_ap_var_for_const2();
    void thread_ap_var_for_const3();
    void thread_ap_var_for_const4();
    void thread_ap_var_for_const5();
    void thread_ap_var_for_const6();
    void thread_ap_var_for_const7();
    void thread_ap_var_for_const8();
    void thread_Stream2Mem_Batch_U0_ap_continue();
    void thread_Stream2Mem_Batch_U0_ap_start();
    void thread_Stream2Mem_Batch_U0_start_full_n();
    void thread_Stream2Mem_Batch_U0_start_write();
    void thread_ap_done();
    void thread_ap_idle();
    void thread_ap_ready();
    void thread_ap_rst_n_inv();
    void thread_ap_sync_continue();
    void thread_ap_sync_done();
    void thread_ap_sync_ready();
    void thread_in0_V_V_TREADY();
    void thread_hdltv_gen();
};

}

using namespace ap_rtl;

#endif
