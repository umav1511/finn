// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2020.1
// Copyright (C) 1986-2020 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#include "StreamingDataflowPartition_2_IODMA_0_StreamingDataflowPartition_2_IODMA_0.h"
#include "AESL_pkg.h"

using namespace std;

namespace ap_rtl {

const int StreamingDataflowPartition_2_IODMA_0_StreamingDataflowPartition_2_IODMA_0::C_S_AXI_DATA_WIDTH = "100000";
const int StreamingDataflowPartition_2_IODMA_0_StreamingDataflowPartition_2_IODMA_0::C_S_AXI_WSTRB_WIDTH = "100";
const int StreamingDataflowPartition_2_IODMA_0_StreamingDataflowPartition_2_IODMA_0::C_S_AXI_ADDR_WIDTH = "100000";
const sc_logic StreamingDataflowPartition_2_IODMA_0_StreamingDataflowPartition_2_IODMA_0::ap_const_logic_1 = sc_dt::Log_1;
const int StreamingDataflowPartition_2_IODMA_0_StreamingDataflowPartition_2_IODMA_0::C_M_AXI_GMEM_USER_VALUE = "0000000000000000000000000000000000000000000000000000000000000000";
const int StreamingDataflowPartition_2_IODMA_0_StreamingDataflowPartition_2_IODMA_0::C_M_AXI_GMEM_PROT_VALUE = "0000000000000000000000000000000000000000000000000000000000000000";
const int StreamingDataflowPartition_2_IODMA_0_StreamingDataflowPartition_2_IODMA_0::C_M_AXI_GMEM_CACHE_VALUE = "11";
const int StreamingDataflowPartition_2_IODMA_0_StreamingDataflowPartition_2_IODMA_0::C_M_AXI_ID_WIDTH = "1";
const int StreamingDataflowPartition_2_IODMA_0_StreamingDataflowPartition_2_IODMA_0::C_M_AXI_ADDR_WIDTH = "1000000";
const int StreamingDataflowPartition_2_IODMA_0_StreamingDataflowPartition_2_IODMA_0::C_M_AXI_DATA_WIDTH = "100000";
const int StreamingDataflowPartition_2_IODMA_0_StreamingDataflowPartition_2_IODMA_0::C_M_AXI_WSTRB_WIDTH = "100";
const int StreamingDataflowPartition_2_IODMA_0_StreamingDataflowPartition_2_IODMA_0::C_M_AXI_AWUSER_WIDTH = "1";
const int StreamingDataflowPartition_2_IODMA_0_StreamingDataflowPartition_2_IODMA_0::C_M_AXI_ARUSER_WIDTH = "1";
const int StreamingDataflowPartition_2_IODMA_0_StreamingDataflowPartition_2_IODMA_0::C_M_AXI_WUSER_WIDTH = "1";
const int StreamingDataflowPartition_2_IODMA_0_StreamingDataflowPartition_2_IODMA_0::C_M_AXI_RUSER_WIDTH = "1";
const int StreamingDataflowPartition_2_IODMA_0_StreamingDataflowPartition_2_IODMA_0::C_M_AXI_BUSER_WIDTH = "1";
const sc_logic StreamingDataflowPartition_2_IODMA_0_StreamingDataflowPartition_2_IODMA_0::ap_const_logic_0 = sc_dt::Log_0;
const sc_lv<64> StreamingDataflowPartition_2_IODMA_0_StreamingDataflowPartition_2_IODMA_0::ap_const_lv64_0 = "0000000000000000000000000000000000000000000000000000000000000000";
const sc_lv<64> StreamingDataflowPartition_2_IODMA_0_StreamingDataflowPartition_2_IODMA_0::ap_const_lv64_1 = "1";
const sc_lv<1> StreamingDataflowPartition_2_IODMA_0_StreamingDataflowPartition_2_IODMA_0::ap_const_lv1_0 = "0";
const sc_lv<1> StreamingDataflowPartition_2_IODMA_0_StreamingDataflowPartition_2_IODMA_0::ap_const_lv1_1 = "1";
const sc_lv<32> StreamingDataflowPartition_2_IODMA_0_StreamingDataflowPartition_2_IODMA_0::ap_const_lv32_0 = "00000000000000000000000000000000";
const sc_lv<32> StreamingDataflowPartition_2_IODMA_0_StreamingDataflowPartition_2_IODMA_0::ap_const_lv32_1 = "1";
const sc_lv<3> StreamingDataflowPartition_2_IODMA_0_StreamingDataflowPartition_2_IODMA_0::ap_const_lv3_0 = "000";
const sc_lv<3> StreamingDataflowPartition_2_IODMA_0_StreamingDataflowPartition_2_IODMA_0::ap_const_lv3_1 = "1";
const sc_lv<2> StreamingDataflowPartition_2_IODMA_0_StreamingDataflowPartition_2_IODMA_0::ap_const_lv2_0 = "00";
const sc_lv<2> StreamingDataflowPartition_2_IODMA_0_StreamingDataflowPartition_2_IODMA_0::ap_const_lv2_1 = "1";
const sc_lv<4> StreamingDataflowPartition_2_IODMA_0_StreamingDataflowPartition_2_IODMA_0::ap_const_lv4_0 = "0000";
const sc_lv<4> StreamingDataflowPartition_2_IODMA_0_StreamingDataflowPartition_2_IODMA_0::ap_const_lv4_1 = "1";
const sc_lv<8> StreamingDataflowPartition_2_IODMA_0_StreamingDataflowPartition_2_IODMA_0::ap_const_lv8_0 = "00000000";
const sc_lv<8> StreamingDataflowPartition_2_IODMA_0_StreamingDataflowPartition_2_IODMA_0::ap_const_lv8_1 = "1";

StreamingDataflowPartition_2_IODMA_0_StreamingDataflowPartition_2_IODMA_0::StreamingDataflowPartition_2_IODMA_0_StreamingDataflowPartition_2_IODMA_0(sc_module_name name) : sc_module(name), mVcdFile(0) {
    StreamingDataflowPartition_2_IODMA_0_control_s_axi_U = new StreamingDataflowPartition_2_IODMA_0_StreamingDataflowPartition_2_IODMA_0_control_s_axi<C_S_AXI_CONTROL_ADDR_WIDTH,C_S_AXI_CONTROL_DATA_WIDTH>("StreamingDataflowPartition_2_IODMA_0_control_s_axi_U");
    StreamingDataflowPartition_2_IODMA_0_control_s_axi_U->AWVALID(s_axi_control_AWVALID);
    StreamingDataflowPartition_2_IODMA_0_control_s_axi_U->AWREADY(s_axi_control_AWREADY);
    StreamingDataflowPartition_2_IODMA_0_control_s_axi_U->AWADDR(s_axi_control_AWADDR);
    StreamingDataflowPartition_2_IODMA_0_control_s_axi_U->WVALID(s_axi_control_WVALID);
    StreamingDataflowPartition_2_IODMA_0_control_s_axi_U->WREADY(s_axi_control_WREADY);
    StreamingDataflowPartition_2_IODMA_0_control_s_axi_U->WDATA(s_axi_control_WDATA);
    StreamingDataflowPartition_2_IODMA_0_control_s_axi_U->WSTRB(s_axi_control_WSTRB);
    StreamingDataflowPartition_2_IODMA_0_control_s_axi_U->ARVALID(s_axi_control_ARVALID);
    StreamingDataflowPartition_2_IODMA_0_control_s_axi_U->ARREADY(s_axi_control_ARREADY);
    StreamingDataflowPartition_2_IODMA_0_control_s_axi_U->ARADDR(s_axi_control_ARADDR);
    StreamingDataflowPartition_2_IODMA_0_control_s_axi_U->RVALID(s_axi_control_RVALID);
    StreamingDataflowPartition_2_IODMA_0_control_s_axi_U->RREADY(s_axi_control_RREADY);
    StreamingDataflowPartition_2_IODMA_0_control_s_axi_U->RDATA(s_axi_control_RDATA);
    StreamingDataflowPartition_2_IODMA_0_control_s_axi_U->RRESP(s_axi_control_RRESP);
    StreamingDataflowPartition_2_IODMA_0_control_s_axi_U->BVALID(s_axi_control_BVALID);
    StreamingDataflowPartition_2_IODMA_0_control_s_axi_U->BREADY(s_axi_control_BREADY);
    StreamingDataflowPartition_2_IODMA_0_control_s_axi_U->BRESP(s_axi_control_BRESP);
    StreamingDataflowPartition_2_IODMA_0_control_s_axi_U->ACLK(ap_clk);
    StreamingDataflowPartition_2_IODMA_0_control_s_axi_U->ARESET(ap_rst_n_inv);
    StreamingDataflowPartition_2_IODMA_0_control_s_axi_U->ACLK_EN(ap_var_for_const0);
    StreamingDataflowPartition_2_IODMA_0_control_s_axi_U->ap_start(ap_start);
    StreamingDataflowPartition_2_IODMA_0_control_s_axi_U->interrupt(interrupt);
    StreamingDataflowPartition_2_IODMA_0_control_s_axi_U->ap_ready(ap_ready);
    StreamingDataflowPartition_2_IODMA_0_control_s_axi_U->ap_done(ap_done);
    StreamingDataflowPartition_2_IODMA_0_control_s_axi_U->ap_idle(ap_idle);
    StreamingDataflowPartition_2_IODMA_0_control_s_axi_U->out_V(out_V);
    StreamingDataflowPartition_2_IODMA_0_control_s_axi_U->numReps(numReps);
    StreamingDataflowPartition_2_IODMA_0_gmem_m_axi_U = new StreamingDataflowPartition_2_IODMA_0_StreamingDataflowPartition_2_IODMA_0_gmem_m_axi<0,8,64,5,16,16,16,16,C_M_AXI_GMEM_ID_WIDTH,C_M_AXI_GMEM_ADDR_WIDTH,C_M_AXI_GMEM_DATA_WIDTH,C_M_AXI_GMEM_AWUSER_WIDTH,C_M_AXI_GMEM_ARUSER_WIDTH,C_M_AXI_GMEM_WUSER_WIDTH,C_M_AXI_GMEM_RUSER_WIDTH,C_M_AXI_GMEM_BUSER_WIDTH,C_M_AXI_GMEM_USER_VALUE,C_M_AXI_GMEM_PROT_VALUE,C_M_AXI_GMEM_CACHE_VALUE>("StreamingDataflowPartition_2_IODMA_0_gmem_m_axi_U");
    StreamingDataflowPartition_2_IODMA_0_gmem_m_axi_U->AWVALID(m_axi_gmem_AWVALID);
    StreamingDataflowPartition_2_IODMA_0_gmem_m_axi_U->AWREADY(m_axi_gmem_AWREADY);
    StreamingDataflowPartition_2_IODMA_0_gmem_m_axi_U->AWADDR(m_axi_gmem_AWADDR);
    StreamingDataflowPartition_2_IODMA_0_gmem_m_axi_U->AWID(m_axi_gmem_AWID);
    StreamingDataflowPartition_2_IODMA_0_gmem_m_axi_U->AWLEN(m_axi_gmem_AWLEN);
    StreamingDataflowPartition_2_IODMA_0_gmem_m_axi_U->AWSIZE(m_axi_gmem_AWSIZE);
    StreamingDataflowPartition_2_IODMA_0_gmem_m_axi_U->AWBURST(m_axi_gmem_AWBURST);
    StreamingDataflowPartition_2_IODMA_0_gmem_m_axi_U->AWLOCK(m_axi_gmem_AWLOCK);
    StreamingDataflowPartition_2_IODMA_0_gmem_m_axi_U->AWCACHE(m_axi_gmem_AWCACHE);
    StreamingDataflowPartition_2_IODMA_0_gmem_m_axi_U->AWPROT(m_axi_gmem_AWPROT);
    StreamingDataflowPartition_2_IODMA_0_gmem_m_axi_U->AWQOS(m_axi_gmem_AWQOS);
    StreamingDataflowPartition_2_IODMA_0_gmem_m_axi_U->AWREGION(m_axi_gmem_AWREGION);
    StreamingDataflowPartition_2_IODMA_0_gmem_m_axi_U->AWUSER(m_axi_gmem_AWUSER);
    StreamingDataflowPartition_2_IODMA_0_gmem_m_axi_U->WVALID(m_axi_gmem_WVALID);
    StreamingDataflowPartition_2_IODMA_0_gmem_m_axi_U->WREADY(m_axi_gmem_WREADY);
    StreamingDataflowPartition_2_IODMA_0_gmem_m_axi_U->WDATA(m_axi_gmem_WDATA);
    StreamingDataflowPartition_2_IODMA_0_gmem_m_axi_U->WSTRB(m_axi_gmem_WSTRB);
    StreamingDataflowPartition_2_IODMA_0_gmem_m_axi_U->WLAST(m_axi_gmem_WLAST);
    StreamingDataflowPartition_2_IODMA_0_gmem_m_axi_U->WID(m_axi_gmem_WID);
    StreamingDataflowPartition_2_IODMA_0_gmem_m_axi_U->WUSER(m_axi_gmem_WUSER);
    StreamingDataflowPartition_2_IODMA_0_gmem_m_axi_U->ARVALID(m_axi_gmem_ARVALID);
    StreamingDataflowPartition_2_IODMA_0_gmem_m_axi_U->ARREADY(m_axi_gmem_ARREADY);
    StreamingDataflowPartition_2_IODMA_0_gmem_m_axi_U->ARADDR(m_axi_gmem_ARADDR);
    StreamingDataflowPartition_2_IODMA_0_gmem_m_axi_U->ARID(m_axi_gmem_ARID);
    StreamingDataflowPartition_2_IODMA_0_gmem_m_axi_U->ARLEN(m_axi_gmem_ARLEN);
    StreamingDataflowPartition_2_IODMA_0_gmem_m_axi_U->ARSIZE(m_axi_gmem_ARSIZE);
    StreamingDataflowPartition_2_IODMA_0_gmem_m_axi_U->ARBURST(m_axi_gmem_ARBURST);
    StreamingDataflowPartition_2_IODMA_0_gmem_m_axi_U->ARLOCK(m_axi_gmem_ARLOCK);
    StreamingDataflowPartition_2_IODMA_0_gmem_m_axi_U->ARCACHE(m_axi_gmem_ARCACHE);
    StreamingDataflowPartition_2_IODMA_0_gmem_m_axi_U->ARPROT(m_axi_gmem_ARPROT);
    StreamingDataflowPartition_2_IODMA_0_gmem_m_axi_U->ARQOS(m_axi_gmem_ARQOS);
    StreamingDataflowPartition_2_IODMA_0_gmem_m_axi_U->ARREGION(m_axi_gmem_ARREGION);
    StreamingDataflowPartition_2_IODMA_0_gmem_m_axi_U->ARUSER(m_axi_gmem_ARUSER);
    StreamingDataflowPartition_2_IODMA_0_gmem_m_axi_U->RVALID(m_axi_gmem_RVALID);
    StreamingDataflowPartition_2_IODMA_0_gmem_m_axi_U->RREADY(m_axi_gmem_RREADY);
    StreamingDataflowPartition_2_IODMA_0_gmem_m_axi_U->RDATA(m_axi_gmem_RDATA);
    StreamingDataflowPartition_2_IODMA_0_gmem_m_axi_U->RLAST(m_axi_gmem_RLAST);
    StreamingDataflowPartition_2_IODMA_0_gmem_m_axi_U->RID(m_axi_gmem_RID);
    StreamingDataflowPartition_2_IODMA_0_gmem_m_axi_U->RUSER(m_axi_gmem_RUSER);
    StreamingDataflowPartition_2_IODMA_0_gmem_m_axi_U->RRESP(m_axi_gmem_RRESP);
    StreamingDataflowPartition_2_IODMA_0_gmem_m_axi_U->BVALID(m_axi_gmem_BVALID);
    StreamingDataflowPartition_2_IODMA_0_gmem_m_axi_U->BREADY(m_axi_gmem_BREADY);
    StreamingDataflowPartition_2_IODMA_0_gmem_m_axi_U->BRESP(m_axi_gmem_BRESP);
    StreamingDataflowPartition_2_IODMA_0_gmem_m_axi_U->BID(m_axi_gmem_BID);
    StreamingDataflowPartition_2_IODMA_0_gmem_m_axi_U->BUSER(m_axi_gmem_BUSER);
    StreamingDataflowPartition_2_IODMA_0_gmem_m_axi_U->ACLK(ap_clk);
    StreamingDataflowPartition_2_IODMA_0_gmem_m_axi_U->ARESET(ap_rst_n_inv);
    StreamingDataflowPartition_2_IODMA_0_gmem_m_axi_U->ACLK_EN(ap_var_for_const0);
    StreamingDataflowPartition_2_IODMA_0_gmem_m_axi_U->I_ARVALID(ap_var_for_const1);
    StreamingDataflowPartition_2_IODMA_0_gmem_m_axi_U->I_ARREADY(gmem_ARREADY);
    StreamingDataflowPartition_2_IODMA_0_gmem_m_axi_U->I_ARADDR(ap_var_for_const2);
    StreamingDataflowPartition_2_IODMA_0_gmem_m_axi_U->I_ARID(ap_var_for_const3);
    StreamingDataflowPartition_2_IODMA_0_gmem_m_axi_U->I_ARLEN(ap_var_for_const4);
    StreamingDataflowPartition_2_IODMA_0_gmem_m_axi_U->I_ARSIZE(ap_var_for_const5);
    StreamingDataflowPartition_2_IODMA_0_gmem_m_axi_U->I_ARLOCK(ap_var_for_const6);
    StreamingDataflowPartition_2_IODMA_0_gmem_m_axi_U->I_ARCACHE(ap_var_for_const7);
    StreamingDataflowPartition_2_IODMA_0_gmem_m_axi_U->I_ARQOS(ap_var_for_const7);
    StreamingDataflowPartition_2_IODMA_0_gmem_m_axi_U->I_ARPROT(ap_var_for_const5);
    StreamingDataflowPartition_2_IODMA_0_gmem_m_axi_U->I_ARUSER(ap_var_for_const3);
    StreamingDataflowPartition_2_IODMA_0_gmem_m_axi_U->I_ARBURST(ap_var_for_const6);
    StreamingDataflowPartition_2_IODMA_0_gmem_m_axi_U->I_ARREGION(ap_var_for_const7);
    StreamingDataflowPartition_2_IODMA_0_gmem_m_axi_U->I_RVALID(gmem_RVALID);
    StreamingDataflowPartition_2_IODMA_0_gmem_m_axi_U->I_RREADY(ap_var_for_const1);
    StreamingDataflowPartition_2_IODMA_0_gmem_m_axi_U->I_RDATA(gmem_RDATA);
    StreamingDataflowPartition_2_IODMA_0_gmem_m_axi_U->I_RID(gmem_RID);
    StreamingDataflowPartition_2_IODMA_0_gmem_m_axi_U->I_RUSER(gmem_RUSER);
    StreamingDataflowPartition_2_IODMA_0_gmem_m_axi_U->I_RRESP(gmem_RRESP);
    StreamingDataflowPartition_2_IODMA_0_gmem_m_axi_U->I_RLAST(gmem_RLAST);
    StreamingDataflowPartition_2_IODMA_0_gmem_m_axi_U->I_AWVALID(Stream2Mem_Batch_U0_m_axi_out_V_AWVALID);
    StreamingDataflowPartition_2_IODMA_0_gmem_m_axi_U->I_AWREADY(gmem_AWREADY);
    StreamingDataflowPartition_2_IODMA_0_gmem_m_axi_U->I_AWADDR(Stream2Mem_Batch_U0_m_axi_out_V_AWADDR);
    StreamingDataflowPartition_2_IODMA_0_gmem_m_axi_U->I_AWID(Stream2Mem_Batch_U0_m_axi_out_V_AWID);
    StreamingDataflowPartition_2_IODMA_0_gmem_m_axi_U->I_AWLEN(Stream2Mem_Batch_U0_m_axi_out_V_AWLEN);
    StreamingDataflowPartition_2_IODMA_0_gmem_m_axi_U->I_AWSIZE(Stream2Mem_Batch_U0_m_axi_out_V_AWSIZE);
    StreamingDataflowPartition_2_IODMA_0_gmem_m_axi_U->I_AWLOCK(Stream2Mem_Batch_U0_m_axi_out_V_AWLOCK);
    StreamingDataflowPartition_2_IODMA_0_gmem_m_axi_U->I_AWCACHE(Stream2Mem_Batch_U0_m_axi_out_V_AWCACHE);
    StreamingDataflowPartition_2_IODMA_0_gmem_m_axi_U->I_AWQOS(Stream2Mem_Batch_U0_m_axi_out_V_AWQOS);
    StreamingDataflowPartition_2_IODMA_0_gmem_m_axi_U->I_AWPROT(Stream2Mem_Batch_U0_m_axi_out_V_AWPROT);
    StreamingDataflowPartition_2_IODMA_0_gmem_m_axi_U->I_AWUSER(Stream2Mem_Batch_U0_m_axi_out_V_AWUSER);
    StreamingDataflowPartition_2_IODMA_0_gmem_m_axi_U->I_AWBURST(Stream2Mem_Batch_U0_m_axi_out_V_AWBURST);
    StreamingDataflowPartition_2_IODMA_0_gmem_m_axi_U->I_AWREGION(Stream2Mem_Batch_U0_m_axi_out_V_AWREGION);
    StreamingDataflowPartition_2_IODMA_0_gmem_m_axi_U->I_WVALID(Stream2Mem_Batch_U0_m_axi_out_V_WVALID);
    StreamingDataflowPartition_2_IODMA_0_gmem_m_axi_U->I_WREADY(gmem_WREADY);
    StreamingDataflowPartition_2_IODMA_0_gmem_m_axi_U->I_WDATA(Stream2Mem_Batch_U0_m_axi_out_V_WDATA);
    StreamingDataflowPartition_2_IODMA_0_gmem_m_axi_U->I_WID(Stream2Mem_Batch_U0_m_axi_out_V_WID);
    StreamingDataflowPartition_2_IODMA_0_gmem_m_axi_U->I_WUSER(Stream2Mem_Batch_U0_m_axi_out_V_WUSER);
    StreamingDataflowPartition_2_IODMA_0_gmem_m_axi_U->I_WLAST(Stream2Mem_Batch_U0_m_axi_out_V_WLAST);
    StreamingDataflowPartition_2_IODMA_0_gmem_m_axi_U->I_WSTRB(Stream2Mem_Batch_U0_m_axi_out_V_WSTRB);
    StreamingDataflowPartition_2_IODMA_0_gmem_m_axi_U->I_BVALID(gmem_BVALID);
    StreamingDataflowPartition_2_IODMA_0_gmem_m_axi_U->I_BREADY(Stream2Mem_Batch_U0_m_axi_out_V_BREADY);
    StreamingDataflowPartition_2_IODMA_0_gmem_m_axi_U->I_BRESP(gmem_BRESP);
    StreamingDataflowPartition_2_IODMA_0_gmem_m_axi_U->I_BID(gmem_BID);
    StreamingDataflowPartition_2_IODMA_0_gmem_m_axi_U->I_BUSER(gmem_BUSER);
    Stream2Mem_Batch_U0 = new StreamingDataflowPartition_2_IODMA_0_Stream2Mem_Batch("Stream2Mem_Batch_U0");
    Stream2Mem_Batch_U0->ap_clk(ap_clk);
    Stream2Mem_Batch_U0->ap_rst(ap_rst_n_inv);
    Stream2Mem_Batch_U0->ap_start(Stream2Mem_Batch_U0_ap_start);
    Stream2Mem_Batch_U0->ap_done(Stream2Mem_Batch_U0_ap_done);
    Stream2Mem_Batch_U0->ap_continue(Stream2Mem_Batch_U0_ap_continue);
    Stream2Mem_Batch_U0->ap_idle(Stream2Mem_Batch_U0_ap_idle);
    Stream2Mem_Batch_U0->ap_ready(Stream2Mem_Batch_U0_ap_ready);
    Stream2Mem_Batch_U0->in_V_V_TDATA(in0_V_V_TDATA);
    Stream2Mem_Batch_U0->in_V_V_TVALID(in0_V_V_TVALID);
    Stream2Mem_Batch_U0->in_V_V_TREADY(Stream2Mem_Batch_U0_in_V_V_TREADY);
    Stream2Mem_Batch_U0->m_axi_out_V_AWVALID(Stream2Mem_Batch_U0_m_axi_out_V_AWVALID);
    Stream2Mem_Batch_U0->m_axi_out_V_AWREADY(gmem_AWREADY);
    Stream2Mem_Batch_U0->m_axi_out_V_AWADDR(Stream2Mem_Batch_U0_m_axi_out_V_AWADDR);
    Stream2Mem_Batch_U0->m_axi_out_V_AWID(Stream2Mem_Batch_U0_m_axi_out_V_AWID);
    Stream2Mem_Batch_U0->m_axi_out_V_AWLEN(Stream2Mem_Batch_U0_m_axi_out_V_AWLEN);
    Stream2Mem_Batch_U0->m_axi_out_V_AWSIZE(Stream2Mem_Batch_U0_m_axi_out_V_AWSIZE);
    Stream2Mem_Batch_U0->m_axi_out_V_AWBURST(Stream2Mem_Batch_U0_m_axi_out_V_AWBURST);
    Stream2Mem_Batch_U0->m_axi_out_V_AWLOCK(Stream2Mem_Batch_U0_m_axi_out_V_AWLOCK);
    Stream2Mem_Batch_U0->m_axi_out_V_AWCACHE(Stream2Mem_Batch_U0_m_axi_out_V_AWCACHE);
    Stream2Mem_Batch_U0->m_axi_out_V_AWPROT(Stream2Mem_Batch_U0_m_axi_out_V_AWPROT);
    Stream2Mem_Batch_U0->m_axi_out_V_AWQOS(Stream2Mem_Batch_U0_m_axi_out_V_AWQOS);
    Stream2Mem_Batch_U0->m_axi_out_V_AWREGION(Stream2Mem_Batch_U0_m_axi_out_V_AWREGION);
    Stream2Mem_Batch_U0->m_axi_out_V_AWUSER(Stream2Mem_Batch_U0_m_axi_out_V_AWUSER);
    Stream2Mem_Batch_U0->m_axi_out_V_WVALID(Stream2Mem_Batch_U0_m_axi_out_V_WVALID);
    Stream2Mem_Batch_U0->m_axi_out_V_WREADY(gmem_WREADY);
    Stream2Mem_Batch_U0->m_axi_out_V_WDATA(Stream2Mem_Batch_U0_m_axi_out_V_WDATA);
    Stream2Mem_Batch_U0->m_axi_out_V_WSTRB(Stream2Mem_Batch_U0_m_axi_out_V_WSTRB);
    Stream2Mem_Batch_U0->m_axi_out_V_WLAST(Stream2Mem_Batch_U0_m_axi_out_V_WLAST);
    Stream2Mem_Batch_U0->m_axi_out_V_WID(Stream2Mem_Batch_U0_m_axi_out_V_WID);
    Stream2Mem_Batch_U0->m_axi_out_V_WUSER(Stream2Mem_Batch_U0_m_axi_out_V_WUSER);
    Stream2Mem_Batch_U0->m_axi_out_V_ARVALID(Stream2Mem_Batch_U0_m_axi_out_V_ARVALID);
    Stream2Mem_Batch_U0->m_axi_out_V_ARREADY(ap_var_for_const1);
    Stream2Mem_Batch_U0->m_axi_out_V_ARADDR(Stream2Mem_Batch_U0_m_axi_out_V_ARADDR);
    Stream2Mem_Batch_U0->m_axi_out_V_ARID(Stream2Mem_Batch_U0_m_axi_out_V_ARID);
    Stream2Mem_Batch_U0->m_axi_out_V_ARLEN(Stream2Mem_Batch_U0_m_axi_out_V_ARLEN);
    Stream2Mem_Batch_U0->m_axi_out_V_ARSIZE(Stream2Mem_Batch_U0_m_axi_out_V_ARSIZE);
    Stream2Mem_Batch_U0->m_axi_out_V_ARBURST(Stream2Mem_Batch_U0_m_axi_out_V_ARBURST);
    Stream2Mem_Batch_U0->m_axi_out_V_ARLOCK(Stream2Mem_Batch_U0_m_axi_out_V_ARLOCK);
    Stream2Mem_Batch_U0->m_axi_out_V_ARCACHE(Stream2Mem_Batch_U0_m_axi_out_V_ARCACHE);
    Stream2Mem_Batch_U0->m_axi_out_V_ARPROT(Stream2Mem_Batch_U0_m_axi_out_V_ARPROT);
    Stream2Mem_Batch_U0->m_axi_out_V_ARQOS(Stream2Mem_Batch_U0_m_axi_out_V_ARQOS);
    Stream2Mem_Batch_U0->m_axi_out_V_ARREGION(Stream2Mem_Batch_U0_m_axi_out_V_ARREGION);
    Stream2Mem_Batch_U0->m_axi_out_V_ARUSER(Stream2Mem_Batch_U0_m_axi_out_V_ARUSER);
    Stream2Mem_Batch_U0->m_axi_out_V_RVALID(ap_var_for_const1);
    Stream2Mem_Batch_U0->m_axi_out_V_RREADY(Stream2Mem_Batch_U0_m_axi_out_V_RREADY);
    Stream2Mem_Batch_U0->m_axi_out_V_RDATA(ap_var_for_const8);
    Stream2Mem_Batch_U0->m_axi_out_V_RLAST(ap_var_for_const1);
    Stream2Mem_Batch_U0->m_axi_out_V_RID(ap_var_for_const3);
    Stream2Mem_Batch_U0->m_axi_out_V_RUSER(ap_var_for_const3);
    Stream2Mem_Batch_U0->m_axi_out_V_RRESP(ap_var_for_const6);
    Stream2Mem_Batch_U0->m_axi_out_V_BVALID(gmem_BVALID);
    Stream2Mem_Batch_U0->m_axi_out_V_BREADY(Stream2Mem_Batch_U0_m_axi_out_V_BREADY);
    Stream2Mem_Batch_U0->m_axi_out_V_BRESP(gmem_BRESP);
    Stream2Mem_Batch_U0->m_axi_out_V_BID(gmem_BID);
    Stream2Mem_Batch_U0->m_axi_out_V_BUSER(gmem_BUSER);
    Stream2Mem_Batch_U0->out_V_offset(out_V);
    Stream2Mem_Batch_U0->numReps(numReps);

    SC_METHOD(thread_Stream2Mem_Batch_U0_ap_continue);

    SC_METHOD(thread_Stream2Mem_Batch_U0_ap_start);
    sensitive << ( ap_start );

    SC_METHOD(thread_Stream2Mem_Batch_U0_start_full_n);

    SC_METHOD(thread_Stream2Mem_Batch_U0_start_write);

    SC_METHOD(thread_ap_done);
    sensitive << ( Stream2Mem_Batch_U0_ap_done );

    SC_METHOD(thread_ap_idle);
    sensitive << ( Stream2Mem_Batch_U0_ap_idle );

    SC_METHOD(thread_ap_ready);
    sensitive << ( Stream2Mem_Batch_U0_ap_ready );

    SC_METHOD(thread_ap_rst_n_inv);
    sensitive << ( ap_rst_n );

    SC_METHOD(thread_ap_sync_continue);

    SC_METHOD(thread_ap_sync_done);
    sensitive << ( Stream2Mem_Batch_U0_ap_done );

    SC_METHOD(thread_ap_sync_ready);
    sensitive << ( Stream2Mem_Batch_U0_ap_ready );

    SC_METHOD(thread_in0_V_V_TREADY);
    sensitive << ( Stream2Mem_Batch_U0_in_V_V_TREADY );

    SC_THREAD(thread_hdltv_gen);
    sensitive << ( ap_clk.pos() );

    SC_THREAD(thread_ap_var_for_const0);

    SC_THREAD(thread_ap_var_for_const1);

    SC_THREAD(thread_ap_var_for_const2);

    SC_THREAD(thread_ap_var_for_const3);

    SC_THREAD(thread_ap_var_for_const4);

    SC_THREAD(thread_ap_var_for_const5);

    SC_THREAD(thread_ap_var_for_const6);

    SC_THREAD(thread_ap_var_for_const7);

    SC_THREAD(thread_ap_var_for_const8);

    static int apTFileNum = 0;
    stringstream apTFilenSS;
    apTFilenSS << "StreamingDataflowPartition_2_IODMA_0_StreamingDataflowPartition_2_IODMA_0_sc_trace_" << apTFileNum ++;
    string apTFn = apTFilenSS.str();
    mVcdFile = sc_create_vcd_trace_file(apTFn.c_str());
    mVcdFile->set_time_unit(1, SC_PS);
    if (1) {
#ifdef __HLS_TRACE_LEVEL_PORT__
    sc_trace(mVcdFile, s_axi_control_AWVALID, "(port)s_axi_control_AWVALID");
    sc_trace(mVcdFile, s_axi_control_AWREADY, "(port)s_axi_control_AWREADY");
    sc_trace(mVcdFile, s_axi_control_AWADDR, "(port)s_axi_control_AWADDR");
    sc_trace(mVcdFile, s_axi_control_WVALID, "(port)s_axi_control_WVALID");
    sc_trace(mVcdFile, s_axi_control_WREADY, "(port)s_axi_control_WREADY");
    sc_trace(mVcdFile, s_axi_control_WDATA, "(port)s_axi_control_WDATA");
    sc_trace(mVcdFile, s_axi_control_WSTRB, "(port)s_axi_control_WSTRB");
    sc_trace(mVcdFile, s_axi_control_ARVALID, "(port)s_axi_control_ARVALID");
    sc_trace(mVcdFile, s_axi_control_ARREADY, "(port)s_axi_control_ARREADY");
    sc_trace(mVcdFile, s_axi_control_ARADDR, "(port)s_axi_control_ARADDR");
    sc_trace(mVcdFile, s_axi_control_RVALID, "(port)s_axi_control_RVALID");
    sc_trace(mVcdFile, s_axi_control_RREADY, "(port)s_axi_control_RREADY");
    sc_trace(mVcdFile, s_axi_control_RDATA, "(port)s_axi_control_RDATA");
    sc_trace(mVcdFile, s_axi_control_RRESP, "(port)s_axi_control_RRESP");
    sc_trace(mVcdFile, s_axi_control_BVALID, "(port)s_axi_control_BVALID");
    sc_trace(mVcdFile, s_axi_control_BREADY, "(port)s_axi_control_BREADY");
    sc_trace(mVcdFile, s_axi_control_BRESP, "(port)s_axi_control_BRESP");
    sc_trace(mVcdFile, ap_clk, "(port)ap_clk");
    sc_trace(mVcdFile, ap_rst_n, "(port)ap_rst_n");
    sc_trace(mVcdFile, interrupt, "(port)interrupt");
    sc_trace(mVcdFile, m_axi_gmem_AWVALID, "(port)m_axi_gmem_AWVALID");
    sc_trace(mVcdFile, m_axi_gmem_AWREADY, "(port)m_axi_gmem_AWREADY");
    sc_trace(mVcdFile, m_axi_gmem_AWADDR, "(port)m_axi_gmem_AWADDR");
    sc_trace(mVcdFile, m_axi_gmem_AWID, "(port)m_axi_gmem_AWID");
    sc_trace(mVcdFile, m_axi_gmem_AWLEN, "(port)m_axi_gmem_AWLEN");
    sc_trace(mVcdFile, m_axi_gmem_AWSIZE, "(port)m_axi_gmem_AWSIZE");
    sc_trace(mVcdFile, m_axi_gmem_AWBURST, "(port)m_axi_gmem_AWBURST");
    sc_trace(mVcdFile, m_axi_gmem_AWLOCK, "(port)m_axi_gmem_AWLOCK");
    sc_trace(mVcdFile, m_axi_gmem_AWCACHE, "(port)m_axi_gmem_AWCACHE");
    sc_trace(mVcdFile, m_axi_gmem_AWPROT, "(port)m_axi_gmem_AWPROT");
    sc_trace(mVcdFile, m_axi_gmem_AWQOS, "(port)m_axi_gmem_AWQOS");
    sc_trace(mVcdFile, m_axi_gmem_AWREGION, "(port)m_axi_gmem_AWREGION");
    sc_trace(mVcdFile, m_axi_gmem_AWUSER, "(port)m_axi_gmem_AWUSER");
    sc_trace(mVcdFile, m_axi_gmem_WVALID, "(port)m_axi_gmem_WVALID");
    sc_trace(mVcdFile, m_axi_gmem_WREADY, "(port)m_axi_gmem_WREADY");
    sc_trace(mVcdFile, m_axi_gmem_WDATA, "(port)m_axi_gmem_WDATA");
    sc_trace(mVcdFile, m_axi_gmem_WSTRB, "(port)m_axi_gmem_WSTRB");
    sc_trace(mVcdFile, m_axi_gmem_WLAST, "(port)m_axi_gmem_WLAST");
    sc_trace(mVcdFile, m_axi_gmem_WID, "(port)m_axi_gmem_WID");
    sc_trace(mVcdFile, m_axi_gmem_WUSER, "(port)m_axi_gmem_WUSER");
    sc_trace(mVcdFile, m_axi_gmem_ARVALID, "(port)m_axi_gmem_ARVALID");
    sc_trace(mVcdFile, m_axi_gmem_ARREADY, "(port)m_axi_gmem_ARREADY");
    sc_trace(mVcdFile, m_axi_gmem_ARADDR, "(port)m_axi_gmem_ARADDR");
    sc_trace(mVcdFile, m_axi_gmem_ARID, "(port)m_axi_gmem_ARID");
    sc_trace(mVcdFile, m_axi_gmem_ARLEN, "(port)m_axi_gmem_ARLEN");
    sc_trace(mVcdFile, m_axi_gmem_ARSIZE, "(port)m_axi_gmem_ARSIZE");
    sc_trace(mVcdFile, m_axi_gmem_ARBURST, "(port)m_axi_gmem_ARBURST");
    sc_trace(mVcdFile, m_axi_gmem_ARLOCK, "(port)m_axi_gmem_ARLOCK");
    sc_trace(mVcdFile, m_axi_gmem_ARCACHE, "(port)m_axi_gmem_ARCACHE");
    sc_trace(mVcdFile, m_axi_gmem_ARPROT, "(port)m_axi_gmem_ARPROT");
    sc_trace(mVcdFile, m_axi_gmem_ARQOS, "(port)m_axi_gmem_ARQOS");
    sc_trace(mVcdFile, m_axi_gmem_ARREGION, "(port)m_axi_gmem_ARREGION");
    sc_trace(mVcdFile, m_axi_gmem_ARUSER, "(port)m_axi_gmem_ARUSER");
    sc_trace(mVcdFile, m_axi_gmem_RVALID, "(port)m_axi_gmem_RVALID");
    sc_trace(mVcdFile, m_axi_gmem_RREADY, "(port)m_axi_gmem_RREADY");
    sc_trace(mVcdFile, m_axi_gmem_RDATA, "(port)m_axi_gmem_RDATA");
    sc_trace(mVcdFile, m_axi_gmem_RLAST, "(port)m_axi_gmem_RLAST");
    sc_trace(mVcdFile, m_axi_gmem_RID, "(port)m_axi_gmem_RID");
    sc_trace(mVcdFile, m_axi_gmem_RUSER, "(port)m_axi_gmem_RUSER");
    sc_trace(mVcdFile, m_axi_gmem_RRESP, "(port)m_axi_gmem_RRESP");
    sc_trace(mVcdFile, m_axi_gmem_BVALID, "(port)m_axi_gmem_BVALID");
    sc_trace(mVcdFile, m_axi_gmem_BREADY, "(port)m_axi_gmem_BREADY");
    sc_trace(mVcdFile, m_axi_gmem_BRESP, "(port)m_axi_gmem_BRESP");
    sc_trace(mVcdFile, m_axi_gmem_BID, "(port)m_axi_gmem_BID");
    sc_trace(mVcdFile, m_axi_gmem_BUSER, "(port)m_axi_gmem_BUSER");
    sc_trace(mVcdFile, in0_V_V_TDATA, "(port)in0_V_V_TDATA");
    sc_trace(mVcdFile, in0_V_V_TVALID, "(port)in0_V_V_TVALID");
    sc_trace(mVcdFile, in0_V_V_TREADY, "(port)in0_V_V_TREADY");
#endif
#ifdef __HLS_TRACE_LEVEL_INT__
    sc_trace(mVcdFile, ap_rst_n_inv, "ap_rst_n_inv");
    sc_trace(mVcdFile, ap_start, "ap_start");
    sc_trace(mVcdFile, ap_ready, "ap_ready");
    sc_trace(mVcdFile, ap_done, "ap_done");
    sc_trace(mVcdFile, ap_idle, "ap_idle");
    sc_trace(mVcdFile, out_V, "out_V");
    sc_trace(mVcdFile, numReps, "numReps");
    sc_trace(mVcdFile, gmem_AWREADY, "gmem_AWREADY");
    sc_trace(mVcdFile, gmem_WREADY, "gmem_WREADY");
    sc_trace(mVcdFile, gmem_ARREADY, "gmem_ARREADY");
    sc_trace(mVcdFile, gmem_RVALID, "gmem_RVALID");
    sc_trace(mVcdFile, gmem_RDATA, "gmem_RDATA");
    sc_trace(mVcdFile, gmem_RLAST, "gmem_RLAST");
    sc_trace(mVcdFile, gmem_RID, "gmem_RID");
    sc_trace(mVcdFile, gmem_RUSER, "gmem_RUSER");
    sc_trace(mVcdFile, gmem_RRESP, "gmem_RRESP");
    sc_trace(mVcdFile, gmem_BVALID, "gmem_BVALID");
    sc_trace(mVcdFile, gmem_BRESP, "gmem_BRESP");
    sc_trace(mVcdFile, gmem_BID, "gmem_BID");
    sc_trace(mVcdFile, gmem_BUSER, "gmem_BUSER");
    sc_trace(mVcdFile, Stream2Mem_Batch_U0_ap_start, "Stream2Mem_Batch_U0_ap_start");
    sc_trace(mVcdFile, Stream2Mem_Batch_U0_ap_done, "Stream2Mem_Batch_U0_ap_done");
    sc_trace(mVcdFile, Stream2Mem_Batch_U0_ap_continue, "Stream2Mem_Batch_U0_ap_continue");
    sc_trace(mVcdFile, Stream2Mem_Batch_U0_ap_idle, "Stream2Mem_Batch_U0_ap_idle");
    sc_trace(mVcdFile, Stream2Mem_Batch_U0_ap_ready, "Stream2Mem_Batch_U0_ap_ready");
    sc_trace(mVcdFile, Stream2Mem_Batch_U0_in_V_V_TREADY, "Stream2Mem_Batch_U0_in_V_V_TREADY");
    sc_trace(mVcdFile, Stream2Mem_Batch_U0_m_axi_out_V_AWVALID, "Stream2Mem_Batch_U0_m_axi_out_V_AWVALID");
    sc_trace(mVcdFile, Stream2Mem_Batch_U0_m_axi_out_V_AWADDR, "Stream2Mem_Batch_U0_m_axi_out_V_AWADDR");
    sc_trace(mVcdFile, Stream2Mem_Batch_U0_m_axi_out_V_AWID, "Stream2Mem_Batch_U0_m_axi_out_V_AWID");
    sc_trace(mVcdFile, Stream2Mem_Batch_U0_m_axi_out_V_AWLEN, "Stream2Mem_Batch_U0_m_axi_out_V_AWLEN");
    sc_trace(mVcdFile, Stream2Mem_Batch_U0_m_axi_out_V_AWSIZE, "Stream2Mem_Batch_U0_m_axi_out_V_AWSIZE");
    sc_trace(mVcdFile, Stream2Mem_Batch_U0_m_axi_out_V_AWBURST, "Stream2Mem_Batch_U0_m_axi_out_V_AWBURST");
    sc_trace(mVcdFile, Stream2Mem_Batch_U0_m_axi_out_V_AWLOCK, "Stream2Mem_Batch_U0_m_axi_out_V_AWLOCK");
    sc_trace(mVcdFile, Stream2Mem_Batch_U0_m_axi_out_V_AWCACHE, "Stream2Mem_Batch_U0_m_axi_out_V_AWCACHE");
    sc_trace(mVcdFile, Stream2Mem_Batch_U0_m_axi_out_V_AWPROT, "Stream2Mem_Batch_U0_m_axi_out_V_AWPROT");
    sc_trace(mVcdFile, Stream2Mem_Batch_U0_m_axi_out_V_AWQOS, "Stream2Mem_Batch_U0_m_axi_out_V_AWQOS");
    sc_trace(mVcdFile, Stream2Mem_Batch_U0_m_axi_out_V_AWREGION, "Stream2Mem_Batch_U0_m_axi_out_V_AWREGION");
    sc_trace(mVcdFile, Stream2Mem_Batch_U0_m_axi_out_V_AWUSER, "Stream2Mem_Batch_U0_m_axi_out_V_AWUSER");
    sc_trace(mVcdFile, Stream2Mem_Batch_U0_m_axi_out_V_WVALID, "Stream2Mem_Batch_U0_m_axi_out_V_WVALID");
    sc_trace(mVcdFile, Stream2Mem_Batch_U0_m_axi_out_V_WDATA, "Stream2Mem_Batch_U0_m_axi_out_V_WDATA");
    sc_trace(mVcdFile, Stream2Mem_Batch_U0_m_axi_out_V_WSTRB, "Stream2Mem_Batch_U0_m_axi_out_V_WSTRB");
    sc_trace(mVcdFile, Stream2Mem_Batch_U0_m_axi_out_V_WLAST, "Stream2Mem_Batch_U0_m_axi_out_V_WLAST");
    sc_trace(mVcdFile, Stream2Mem_Batch_U0_m_axi_out_V_WID, "Stream2Mem_Batch_U0_m_axi_out_V_WID");
    sc_trace(mVcdFile, Stream2Mem_Batch_U0_m_axi_out_V_WUSER, "Stream2Mem_Batch_U0_m_axi_out_V_WUSER");
    sc_trace(mVcdFile, Stream2Mem_Batch_U0_m_axi_out_V_ARVALID, "Stream2Mem_Batch_U0_m_axi_out_V_ARVALID");
    sc_trace(mVcdFile, Stream2Mem_Batch_U0_m_axi_out_V_ARADDR, "Stream2Mem_Batch_U0_m_axi_out_V_ARADDR");
    sc_trace(mVcdFile, Stream2Mem_Batch_U0_m_axi_out_V_ARID, "Stream2Mem_Batch_U0_m_axi_out_V_ARID");
    sc_trace(mVcdFile, Stream2Mem_Batch_U0_m_axi_out_V_ARLEN, "Stream2Mem_Batch_U0_m_axi_out_V_ARLEN");
    sc_trace(mVcdFile, Stream2Mem_Batch_U0_m_axi_out_V_ARSIZE, "Stream2Mem_Batch_U0_m_axi_out_V_ARSIZE");
    sc_trace(mVcdFile, Stream2Mem_Batch_U0_m_axi_out_V_ARBURST, "Stream2Mem_Batch_U0_m_axi_out_V_ARBURST");
    sc_trace(mVcdFile, Stream2Mem_Batch_U0_m_axi_out_V_ARLOCK, "Stream2Mem_Batch_U0_m_axi_out_V_ARLOCK");
    sc_trace(mVcdFile, Stream2Mem_Batch_U0_m_axi_out_V_ARCACHE, "Stream2Mem_Batch_U0_m_axi_out_V_ARCACHE");
    sc_trace(mVcdFile, Stream2Mem_Batch_U0_m_axi_out_V_ARPROT, "Stream2Mem_Batch_U0_m_axi_out_V_ARPROT");
    sc_trace(mVcdFile, Stream2Mem_Batch_U0_m_axi_out_V_ARQOS, "Stream2Mem_Batch_U0_m_axi_out_V_ARQOS");
    sc_trace(mVcdFile, Stream2Mem_Batch_U0_m_axi_out_V_ARREGION, "Stream2Mem_Batch_U0_m_axi_out_V_ARREGION");
    sc_trace(mVcdFile, Stream2Mem_Batch_U0_m_axi_out_V_ARUSER, "Stream2Mem_Batch_U0_m_axi_out_V_ARUSER");
    sc_trace(mVcdFile, Stream2Mem_Batch_U0_m_axi_out_V_RREADY, "Stream2Mem_Batch_U0_m_axi_out_V_RREADY");
    sc_trace(mVcdFile, Stream2Mem_Batch_U0_m_axi_out_V_BREADY, "Stream2Mem_Batch_U0_m_axi_out_V_BREADY");
    sc_trace(mVcdFile, ap_sync_continue, "ap_sync_continue");
    sc_trace(mVcdFile, ap_sync_done, "ap_sync_done");
    sc_trace(mVcdFile, ap_sync_ready, "ap_sync_ready");
    sc_trace(mVcdFile, Stream2Mem_Batch_U0_start_full_n, "Stream2Mem_Batch_U0_start_full_n");
    sc_trace(mVcdFile, Stream2Mem_Batch_U0_start_write, "Stream2Mem_Batch_U0_start_write");
#endif

    }
    mHdltvinHandle.open("StreamingDataflowPartition_2_IODMA_0_StreamingDataflowPartition_2_IODMA_0.hdltvin.dat");
    mHdltvoutHandle.open("StreamingDataflowPartition_2_IODMA_0_StreamingDataflowPartition_2_IODMA_0.hdltvout.dat");
}

StreamingDataflowPartition_2_IODMA_0_StreamingDataflowPartition_2_IODMA_0::~StreamingDataflowPartition_2_IODMA_0_StreamingDataflowPartition_2_IODMA_0() {
    if (mVcdFile) 
        sc_close_vcd_trace_file(mVcdFile);

    mHdltvinHandle << "] " << endl;
    mHdltvoutHandle << "] " << endl;
    mHdltvinHandle.close();
    mHdltvoutHandle.close();
    delete StreamingDataflowPartition_2_IODMA_0_control_s_axi_U;
    delete StreamingDataflowPartition_2_IODMA_0_gmem_m_axi_U;
    delete Stream2Mem_Batch_U0;
}

void StreamingDataflowPartition_2_IODMA_0_StreamingDataflowPartition_2_IODMA_0::thread_ap_var_for_const0() {
    ap_var_for_const0 = ap_const_logic_1;
}

void StreamingDataflowPartition_2_IODMA_0_StreamingDataflowPartition_2_IODMA_0::thread_ap_var_for_const1() {
    ap_var_for_const1 = ap_const_logic_0;
}

void StreamingDataflowPartition_2_IODMA_0_StreamingDataflowPartition_2_IODMA_0::thread_ap_var_for_const2() {
    ap_var_for_const2 = ap_const_lv64_0;
}

void StreamingDataflowPartition_2_IODMA_0_StreamingDataflowPartition_2_IODMA_0::thread_ap_var_for_const3() {
    ap_var_for_const3 = ap_const_lv1_0;
}

void StreamingDataflowPartition_2_IODMA_0_StreamingDataflowPartition_2_IODMA_0::thread_ap_var_for_const4() {
    ap_var_for_const4 = ap_const_lv32_0;
}

void StreamingDataflowPartition_2_IODMA_0_StreamingDataflowPartition_2_IODMA_0::thread_ap_var_for_const5() {
    ap_var_for_const5 = ap_const_lv3_0;
}

void StreamingDataflowPartition_2_IODMA_0_StreamingDataflowPartition_2_IODMA_0::thread_ap_var_for_const6() {
    ap_var_for_const6 = ap_const_lv2_0;
}

void StreamingDataflowPartition_2_IODMA_0_StreamingDataflowPartition_2_IODMA_0::thread_ap_var_for_const7() {
    ap_var_for_const7 = ap_const_lv4_0;
}

void StreamingDataflowPartition_2_IODMA_0_StreamingDataflowPartition_2_IODMA_0::thread_ap_var_for_const8() {
    ap_var_for_const8 = ap_const_lv8_0;
}

void StreamingDataflowPartition_2_IODMA_0_StreamingDataflowPartition_2_IODMA_0::thread_Stream2Mem_Batch_U0_ap_continue() {
    Stream2Mem_Batch_U0_ap_continue = ap_const_logic_1;
}

void StreamingDataflowPartition_2_IODMA_0_StreamingDataflowPartition_2_IODMA_0::thread_Stream2Mem_Batch_U0_ap_start() {
    Stream2Mem_Batch_U0_ap_start = ap_start.read();
}

void StreamingDataflowPartition_2_IODMA_0_StreamingDataflowPartition_2_IODMA_0::thread_Stream2Mem_Batch_U0_start_full_n() {
    Stream2Mem_Batch_U0_start_full_n = ap_const_logic_1;
}

void StreamingDataflowPartition_2_IODMA_0_StreamingDataflowPartition_2_IODMA_0::thread_Stream2Mem_Batch_U0_start_write() {
    Stream2Mem_Batch_U0_start_write = ap_const_logic_0;
}

void StreamingDataflowPartition_2_IODMA_0_StreamingDataflowPartition_2_IODMA_0::thread_ap_done() {
    ap_done = Stream2Mem_Batch_U0_ap_done.read();
}

void StreamingDataflowPartition_2_IODMA_0_StreamingDataflowPartition_2_IODMA_0::thread_ap_idle() {
    ap_idle = Stream2Mem_Batch_U0_ap_idle.read();
}

void StreamingDataflowPartition_2_IODMA_0_StreamingDataflowPartition_2_IODMA_0::thread_ap_ready() {
    ap_ready = Stream2Mem_Batch_U0_ap_ready.read();
}

void StreamingDataflowPartition_2_IODMA_0_StreamingDataflowPartition_2_IODMA_0::thread_ap_rst_n_inv() {
    ap_rst_n_inv =  (sc_logic) (~ap_rst_n.read());
}

void StreamingDataflowPartition_2_IODMA_0_StreamingDataflowPartition_2_IODMA_0::thread_ap_sync_continue() {
    ap_sync_continue = ap_const_logic_1;
}

void StreamingDataflowPartition_2_IODMA_0_StreamingDataflowPartition_2_IODMA_0::thread_ap_sync_done() {
    ap_sync_done = Stream2Mem_Batch_U0_ap_done.read();
}

void StreamingDataflowPartition_2_IODMA_0_StreamingDataflowPartition_2_IODMA_0::thread_ap_sync_ready() {
    ap_sync_ready = Stream2Mem_Batch_U0_ap_ready.read();
}

void StreamingDataflowPartition_2_IODMA_0_StreamingDataflowPartition_2_IODMA_0::thread_in0_V_V_TREADY() {
    in0_V_V_TREADY = Stream2Mem_Batch_U0_in_V_V_TREADY.read();
}

void StreamingDataflowPartition_2_IODMA_0_StreamingDataflowPartition_2_IODMA_0::thread_hdltv_gen() {
    const char* dump_tv = std::getenv("AP_WRITE_TV");
    if (!(dump_tv && string(dump_tv) == "on")) return;

    wait();

    mHdltvinHandle << "[ " << endl;
    mHdltvoutHandle << "[ " << endl;
    int ap_cycleNo = 0;
    while (1) {
        wait();
        const char* mComma = ap_cycleNo == 0 ? " " : ", " ;
        mHdltvinHandle << mComma << "{"  <<  " \"s_axi_control_AWVALID\" :  \"" << s_axi_control_AWVALID.read() << "\" ";
        mHdltvoutHandle << mComma << "{"  <<  " \"s_axi_control_AWREADY\" :  \"" << s_axi_control_AWREADY.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_control_AWADDR\" :  \"" << s_axi_control_AWADDR.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_control_WVALID\" :  \"" << s_axi_control_WVALID.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_axi_control_WREADY\" :  \"" << s_axi_control_WREADY.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_control_WDATA\" :  \"" << s_axi_control_WDATA.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_control_WSTRB\" :  \"" << s_axi_control_WSTRB.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_control_ARVALID\" :  \"" << s_axi_control_ARVALID.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_axi_control_ARREADY\" :  \"" << s_axi_control_ARREADY.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_control_ARADDR\" :  \"" << s_axi_control_ARADDR.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_axi_control_RVALID\" :  \"" << s_axi_control_RVALID.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_control_RREADY\" :  \"" << s_axi_control_RREADY.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_axi_control_RDATA\" :  \"" << s_axi_control_RDATA.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_axi_control_RRESP\" :  \"" << s_axi_control_RRESP.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_axi_control_BVALID\" :  \"" << s_axi_control_BVALID.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_control_BREADY\" :  \"" << s_axi_control_BREADY.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_axi_control_BRESP\" :  \"" << s_axi_control_BRESP.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"ap_rst_n\" :  \"" << ap_rst_n.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"interrupt\" :  \"" << interrupt.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_gmem_AWVALID\" :  \"" << m_axi_gmem_AWVALID.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"m_axi_gmem_AWREADY\" :  \"" << m_axi_gmem_AWREADY.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_gmem_AWADDR\" :  \"" << m_axi_gmem_AWADDR.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_gmem_AWID\" :  \"" << m_axi_gmem_AWID.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_gmem_AWLEN\" :  \"" << m_axi_gmem_AWLEN.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_gmem_AWSIZE\" :  \"" << m_axi_gmem_AWSIZE.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_gmem_AWBURST\" :  \"" << m_axi_gmem_AWBURST.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_gmem_AWLOCK\" :  \"" << m_axi_gmem_AWLOCK.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_gmem_AWCACHE\" :  \"" << m_axi_gmem_AWCACHE.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_gmem_AWPROT\" :  \"" << m_axi_gmem_AWPROT.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_gmem_AWQOS\" :  \"" << m_axi_gmem_AWQOS.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_gmem_AWREGION\" :  \"" << m_axi_gmem_AWREGION.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_gmem_AWUSER\" :  \"" << m_axi_gmem_AWUSER.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_gmem_WVALID\" :  \"" << m_axi_gmem_WVALID.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"m_axi_gmem_WREADY\" :  \"" << m_axi_gmem_WREADY.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_gmem_WDATA\" :  \"" << m_axi_gmem_WDATA.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_gmem_WSTRB\" :  \"" << m_axi_gmem_WSTRB.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_gmem_WLAST\" :  \"" << m_axi_gmem_WLAST.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_gmem_WID\" :  \"" << m_axi_gmem_WID.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_gmem_WUSER\" :  \"" << m_axi_gmem_WUSER.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_gmem_ARVALID\" :  \"" << m_axi_gmem_ARVALID.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"m_axi_gmem_ARREADY\" :  \"" << m_axi_gmem_ARREADY.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_gmem_ARADDR\" :  \"" << m_axi_gmem_ARADDR.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_gmem_ARID\" :  \"" << m_axi_gmem_ARID.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_gmem_ARLEN\" :  \"" << m_axi_gmem_ARLEN.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_gmem_ARSIZE\" :  \"" << m_axi_gmem_ARSIZE.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_gmem_ARBURST\" :  \"" << m_axi_gmem_ARBURST.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_gmem_ARLOCK\" :  \"" << m_axi_gmem_ARLOCK.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_gmem_ARCACHE\" :  \"" << m_axi_gmem_ARCACHE.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_gmem_ARPROT\" :  \"" << m_axi_gmem_ARPROT.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_gmem_ARQOS\" :  \"" << m_axi_gmem_ARQOS.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_gmem_ARREGION\" :  \"" << m_axi_gmem_ARREGION.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_gmem_ARUSER\" :  \"" << m_axi_gmem_ARUSER.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"m_axi_gmem_RVALID\" :  \"" << m_axi_gmem_RVALID.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_gmem_RREADY\" :  \"" << m_axi_gmem_RREADY.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"m_axi_gmem_RDATA\" :  \"" << m_axi_gmem_RDATA.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"m_axi_gmem_RLAST\" :  \"" << m_axi_gmem_RLAST.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"m_axi_gmem_RID\" :  \"" << m_axi_gmem_RID.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"m_axi_gmem_RUSER\" :  \"" << m_axi_gmem_RUSER.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"m_axi_gmem_RRESP\" :  \"" << m_axi_gmem_RRESP.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"m_axi_gmem_BVALID\" :  \"" << m_axi_gmem_BVALID.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_gmem_BREADY\" :  \"" << m_axi_gmem_BREADY.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"m_axi_gmem_BRESP\" :  \"" << m_axi_gmem_BRESP.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"m_axi_gmem_BID\" :  \"" << m_axi_gmem_BID.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"m_axi_gmem_BUSER\" :  \"" << m_axi_gmem_BUSER.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"in0_V_V_TDATA\" :  \"" << in0_V_V_TDATA.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"in0_V_V_TVALID\" :  \"" << in0_V_V_TVALID.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"in0_V_V_TREADY\" :  \"" << in0_V_V_TREADY.read() << "\" ";
        mHdltvinHandle << "}" << std::endl;
        mHdltvoutHandle << "}" << std::endl;
        ap_cycleNo++;
    }
}

}

