// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2020.1
// Copyright (C) 1986-2020 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#ifndef _StreamingDataflowPartition_2_IODMA_0_Stream2Mem_8u_1u_s_HH_
#define _StreamingDataflowPartition_2_IODMA_0_Stream2Mem_8u_1u_s_HH_

#include "systemc.h"
#include "AESL_pkg.h"


namespace ap_rtl {

struct StreamingDataflowPartition_2_IODMA_0_Stream2Mem_8u_1u_s : public sc_module {
    // Port declarations 60
    sc_in_clk ap_clk;
    sc_in< sc_logic > ap_rst;
    sc_in< sc_logic > ap_start;
    sc_out< sc_logic > ap_done;
    sc_out< sc_logic > ap_idle;
    sc_out< sc_logic > ap_ready;
    sc_in< sc_logic > in_V_V_TVALID;
    sc_out< sc_logic > m_axi_out_V_AWVALID;
    sc_in< sc_logic > m_axi_out_V_AWREADY;
    sc_out< sc_lv<64> > m_axi_out_V_AWADDR;
    sc_out< sc_lv<1> > m_axi_out_V_AWID;
    sc_out< sc_lv<32> > m_axi_out_V_AWLEN;
    sc_out< sc_lv<3> > m_axi_out_V_AWSIZE;
    sc_out< sc_lv<2> > m_axi_out_V_AWBURST;
    sc_out< sc_lv<2> > m_axi_out_V_AWLOCK;
    sc_out< sc_lv<4> > m_axi_out_V_AWCACHE;
    sc_out< sc_lv<3> > m_axi_out_V_AWPROT;
    sc_out< sc_lv<4> > m_axi_out_V_AWQOS;
    sc_out< sc_lv<4> > m_axi_out_V_AWREGION;
    sc_out< sc_lv<1> > m_axi_out_V_AWUSER;
    sc_out< sc_logic > m_axi_out_V_WVALID;
    sc_in< sc_logic > m_axi_out_V_WREADY;
    sc_out< sc_lv<8> > m_axi_out_V_WDATA;
    sc_out< sc_lv<1> > m_axi_out_V_WSTRB;
    sc_out< sc_logic > m_axi_out_V_WLAST;
    sc_out< sc_lv<1> > m_axi_out_V_WID;
    sc_out< sc_lv<1> > m_axi_out_V_WUSER;
    sc_out< sc_logic > m_axi_out_V_ARVALID;
    sc_in< sc_logic > m_axi_out_V_ARREADY;
    sc_out< sc_lv<64> > m_axi_out_V_ARADDR;
    sc_out< sc_lv<1> > m_axi_out_V_ARID;
    sc_out< sc_lv<32> > m_axi_out_V_ARLEN;
    sc_out< sc_lv<3> > m_axi_out_V_ARSIZE;
    sc_out< sc_lv<2> > m_axi_out_V_ARBURST;
    sc_out< sc_lv<2> > m_axi_out_V_ARLOCK;
    sc_out< sc_lv<4> > m_axi_out_V_ARCACHE;
    sc_out< sc_lv<3> > m_axi_out_V_ARPROT;
    sc_out< sc_lv<4> > m_axi_out_V_ARQOS;
    sc_out< sc_lv<4> > m_axi_out_V_ARREGION;
    sc_out< sc_lv<1> > m_axi_out_V_ARUSER;
    sc_in< sc_logic > m_axi_out_V_RVALID;
    sc_out< sc_logic > m_axi_out_V_RREADY;
    sc_in< sc_lv<8> > m_axi_out_V_RDATA;
    sc_in< sc_logic > m_axi_out_V_RLAST;
    sc_in< sc_lv<1> > m_axi_out_V_RID;
    sc_in< sc_lv<1> > m_axi_out_V_RUSER;
    sc_in< sc_lv<2> > m_axi_out_V_RRESP;
    sc_in< sc_logic > m_axi_out_V_BVALID;
    sc_out< sc_logic > m_axi_out_V_BREADY;
    sc_in< sc_lv<2> > m_axi_out_V_BRESP;
    sc_in< sc_lv<1> > m_axi_out_V_BID;
    sc_in< sc_lv<1> > m_axi_out_V_BUSER;
    sc_in< sc_lv<8> > in_V_V_TDATA;
    sc_out< sc_logic > in_V_V_TREADY;
    sc_in< sc_lv<64> > out_V_offset;
    sc_in< sc_lv<32> > out_V_offset1;
    sc_out< sc_logic > in_V_V_TDATA_blk_n;
    sc_out< sc_logic > out_V_blk_n_AW;
    sc_out< sc_logic > out_V_blk_n_W;
    sc_out< sc_logic > out_V_blk_n_B;


    // Module declarations
    StreamingDataflowPartition_2_IODMA_0_Stream2Mem_8u_1u_s(sc_module_name name);
    SC_HAS_PROCESS(StreamingDataflowPartition_2_IODMA_0_Stream2Mem_8u_1u_s);

    ~StreamingDataflowPartition_2_IODMA_0_Stream2Mem_8u_1u_s();

    sc_trace_file* mVcdFile;

    sc_signal< sc_lv<1> > ap_CS_fsm;
    sc_signal< sc_logic > ap_CS_fsm_pp0_stage0;
    sc_signal< sc_logic > ap_enable_reg_pp0_iter0;
    sc_signal< bool > ap_block_pp0_stage0;
    sc_signal< sc_logic > ap_enable_reg_pp0_iter1;
    sc_signal< sc_logic > ap_enable_reg_pp0_iter2;
    sc_signal< sc_logic > ap_enable_reg_pp0_iter3;
    sc_signal< sc_logic > ap_enable_reg_pp0_iter4;
    sc_signal< sc_logic > ap_enable_reg_pp0_iter5;
    sc_signal< sc_logic > ap_enable_reg_pp0_iter6;
    sc_signal< sc_logic > ap_enable_reg_pp0_iter7;
    sc_signal< sc_logic > ap_idle_pp0;
    sc_signal< bool > ap_block_state1_pp0_stage0_iter0;
    sc_signal< bool > ap_block_state2_pp0_stage0_iter1;
    sc_signal< bool > ap_block_state3_pp0_stage0_iter2;
    sc_signal< bool > ap_block_state4_pp0_stage0_iter3;
    sc_signal< bool > ap_block_state5_pp0_stage0_iter4;
    sc_signal< bool > ap_block_state6_pp0_stage0_iter5;
    sc_signal< bool > ap_block_state7_pp0_stage0_iter6;
    sc_signal< bool > ap_block_state8_pp0_stage0_iter7;
    sc_signal< bool > ap_block_pp0_stage0_11001;
    sc_signal< sc_lv<64> > out_V_addr_reg_100;
    sc_signal< sc_lv<8> > tmp_V_reg_106;
    sc_signal< sc_lv<8> > tmp_V_reg_106_pp0_iter1_reg;
    sc_signal< bool > ap_block_pp0_stage0_subdone;
    sc_signal< sc_lv<64> > add_ln149_fu_88_p2;
    sc_signal< bool > ap_block_pp0_stage0_01001;
    sc_signal< sc_lv<64> > zext_ln149_fu_84_p1;
    sc_signal< sc_lv<1> > ap_NS_fsm;
    sc_signal< sc_logic > ap_idle_pp0_0to6;
    sc_signal< sc_logic > ap_reset_idle_pp0;
    sc_signal< sc_logic > ap_enable_pp0;
    static const sc_logic ap_const_logic_1;
    static const sc_logic ap_const_logic_0;
    static const sc_lv<1> ap_ST_fsm_pp0_stage0;
    static const bool ap_const_boolean_1;
    static const sc_lv<32> ap_const_lv32_0;
    static const bool ap_const_boolean_0;
    static const sc_lv<64> ap_const_lv64_0;
    static const sc_lv<1> ap_const_lv1_0;
    static const sc_lv<3> ap_const_lv3_0;
    static const sc_lv<2> ap_const_lv2_0;
    static const sc_lv<4> ap_const_lv4_0;
    static const sc_lv<32> ap_const_lv32_1;
    static const sc_lv<1> ap_const_lv1_1;
    // Thread declarations
    void thread_ap_clk_no_reset_();
    void thread_add_ln149_fu_88_p2();
    void thread_ap_CS_fsm_pp0_stage0();
    void thread_ap_block_pp0_stage0();
    void thread_ap_block_pp0_stage0_01001();
    void thread_ap_block_pp0_stage0_11001();
    void thread_ap_block_pp0_stage0_subdone();
    void thread_ap_block_state1_pp0_stage0_iter0();
    void thread_ap_block_state2_pp0_stage0_iter1();
    void thread_ap_block_state3_pp0_stage0_iter2();
    void thread_ap_block_state4_pp0_stage0_iter3();
    void thread_ap_block_state5_pp0_stage0_iter4();
    void thread_ap_block_state6_pp0_stage0_iter5();
    void thread_ap_block_state7_pp0_stage0_iter6();
    void thread_ap_block_state8_pp0_stage0_iter7();
    void thread_ap_done();
    void thread_ap_enable_pp0();
    void thread_ap_enable_reg_pp0_iter0();
    void thread_ap_idle();
    void thread_ap_idle_pp0();
    void thread_ap_idle_pp0_0to6();
    void thread_ap_ready();
    void thread_ap_reset_idle_pp0();
    void thread_in_V_V_TDATA_blk_n();
    void thread_in_V_V_TREADY();
    void thread_m_axi_out_V_ARADDR();
    void thread_m_axi_out_V_ARBURST();
    void thread_m_axi_out_V_ARCACHE();
    void thread_m_axi_out_V_ARID();
    void thread_m_axi_out_V_ARLEN();
    void thread_m_axi_out_V_ARLOCK();
    void thread_m_axi_out_V_ARPROT();
    void thread_m_axi_out_V_ARQOS();
    void thread_m_axi_out_V_ARREGION();
    void thread_m_axi_out_V_ARSIZE();
    void thread_m_axi_out_V_ARUSER();
    void thread_m_axi_out_V_ARVALID();
    void thread_m_axi_out_V_AWADDR();
    void thread_m_axi_out_V_AWBURST();
    void thread_m_axi_out_V_AWCACHE();
    void thread_m_axi_out_V_AWID();
    void thread_m_axi_out_V_AWLEN();
    void thread_m_axi_out_V_AWLOCK();
    void thread_m_axi_out_V_AWPROT();
    void thread_m_axi_out_V_AWQOS();
    void thread_m_axi_out_V_AWREGION();
    void thread_m_axi_out_V_AWSIZE();
    void thread_m_axi_out_V_AWUSER();
    void thread_m_axi_out_V_AWVALID();
    void thread_m_axi_out_V_BREADY();
    void thread_m_axi_out_V_RREADY();
    void thread_m_axi_out_V_WDATA();
    void thread_m_axi_out_V_WID();
    void thread_m_axi_out_V_WLAST();
    void thread_m_axi_out_V_WSTRB();
    void thread_m_axi_out_V_WUSER();
    void thread_m_axi_out_V_WVALID();
    void thread_out_V_blk_n_AW();
    void thread_out_V_blk_n_B();
    void thread_out_V_blk_n_W();
    void thread_zext_ln149_fu_84_p1();
    void thread_ap_NS_fsm();
};

}

using namespace ap_rtl;

#endif
