-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
-- Version: 2020.1
-- Copyright (C) 1986-2020 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity StreamingDataflowPartition_2_IODMA_0_Stream2Mem_8u_16u_s is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    in_V_V_TDATA : IN STD_LOGIC_VECTOR (7 downto 0);
    in_V_V_TVALID : IN STD_LOGIC;
    in_V_V_TREADY : OUT STD_LOGIC;
    m_axi_out_V_AWVALID : OUT STD_LOGIC;
    m_axi_out_V_AWREADY : IN STD_LOGIC;
    m_axi_out_V_AWADDR : OUT STD_LOGIC_VECTOR (63 downto 0);
    m_axi_out_V_AWID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_out_V_AWLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_out_V_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_out_V_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_out_V_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_out_V_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_out_V_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_out_V_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_out_V_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_out_V_AWUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_out_V_WVALID : OUT STD_LOGIC;
    m_axi_out_V_WREADY : IN STD_LOGIC;
    m_axi_out_V_WDATA : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_out_V_WSTRB : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_out_V_WLAST : OUT STD_LOGIC;
    m_axi_out_V_WID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_out_V_WUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_out_V_ARVALID : OUT STD_LOGIC;
    m_axi_out_V_ARREADY : IN STD_LOGIC;
    m_axi_out_V_ARADDR : OUT STD_LOGIC_VECTOR (63 downto 0);
    m_axi_out_V_ARID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_out_V_ARLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_out_V_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_out_V_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_out_V_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_out_V_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_out_V_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_out_V_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_out_V_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_out_V_ARUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_out_V_RVALID : IN STD_LOGIC;
    m_axi_out_V_RREADY : OUT STD_LOGIC;
    m_axi_out_V_RDATA : IN STD_LOGIC_VECTOR (7 downto 0);
    m_axi_out_V_RLAST : IN STD_LOGIC;
    m_axi_out_V_RID : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_out_V_RUSER : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_out_V_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_out_V_BVALID : IN STD_LOGIC;
    m_axi_out_V_BREADY : OUT STD_LOGIC;
    m_axi_out_V_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_out_V_BID : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_out_V_BUSER : IN STD_LOGIC_VECTOR (0 downto 0);
    out_V_offset : IN STD_LOGIC_VECTOR (63 downto 0);
    out_V_offset1 : IN STD_LOGIC_VECTOR (31 downto 0) );
end;


architecture behav of StreamingDataflowPartition_2_IODMA_0_Stream2Mem_8u_16u_s is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (7 downto 0) := "00000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (7 downto 0) := "00000010";
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (7 downto 0) := "00000100";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (7 downto 0) := "00001000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (7 downto 0) := "00010000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (7 downto 0) := "00100000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (7 downto 0) := "01000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (7 downto 0) := "10000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv64_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv5_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv5_10 : STD_LOGIC_VECTOR (4 downto 0) := "10000";
    constant ap_const_lv5_1 : STD_LOGIC_VECTOR (4 downto 0) := "00001";

    signal ap_CS_fsm : STD_LOGIC_VECTOR (7 downto 0) := "00000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal in_V_V_TDATA_blk_n : STD_LOGIC;
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC := '0';
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal icmp_ln153_fu_121_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal out_V_blk_n_AW : STD_LOGIC;
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal out_V_blk_n_W : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal icmp_ln153_reg_139 : STD_LOGIC_VECTOR (0 downto 0);
    signal out_V_blk_n_B : STD_LOGIC;
    signal ap_CS_fsm_state9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal i_0_reg_94 : STD_LOGIC_VECTOR (4 downto 0);
    signal out_V_addr_reg_133 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_state3_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state4_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_state4_io : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal i_fu_127_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_V_reg_148 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_condition_pp0_exit_iter0_state3 : STD_LOGIC;
    signal add_ln321_fu_109_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage0_01001 : BOOLEAN;
    signal zext_ln321_fu_105_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;


begin




    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_logic_1 = ap_condition_pp0_exit_iter0_state3) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
                elsif (((m_axi_out_V_AWREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_condition_pp0_exit_iter0_state3) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
                    ap_enable_reg_pp0_iter1 <= (ap_const_logic_1 xor ap_condition_pp0_exit_iter0_state3);
                elsif ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                elsif (((m_axi_out_V_AWREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    i_0_reg_94_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln153_fu_121_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
                i_0_reg_94 <= i_fu_127_p2;
            elsif (((m_axi_out_V_AWREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                i_0_reg_94 <= ap_const_lv5_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                icmp_ln153_reg_139 <= icmp_ln153_fu_121_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                out_V_addr_reg_133 <= add_ln321_fu_109_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln153_fu_121_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                tmp_V_reg_148 <= in_V_V_TDATA;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, m_axi_out_V_AWREADY, m_axi_out_V_BVALID, ap_enable_reg_pp0_iter0, icmp_ln153_fu_121_p2, ap_CS_fsm_state2, ap_CS_fsm_state9, ap_block_pp0_stage0_subdone)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((m_axi_out_V_AWREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_state2;
                end if;
            when ap_ST_fsm_pp0_stage0 => 
                if (not(((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (icmp_ln153_fu_121_p2 = ap_const_lv1_1)))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                elsif (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (icmp_ln153_fu_121_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state5;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state9;
            when ap_ST_fsm_state9 => 
                if (((m_axi_out_V_BVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state9))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state9;
                end if;
            when others =>  
                ap_NS_fsm <= "XXXXXXXX";
        end case;
    end process;
    add_ln321_fu_109_p2 <= std_logic_vector(unsigned(zext_ln321_fu_105_p1) + unsigned(out_V_offset));
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(2);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state9 <= ap_CS_fsm(7);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage0_01001_assign_proc : process(in_V_V_TVALID, ap_enable_reg_pp0_iter0, icmp_ln153_fu_121_p2)
    begin
                ap_block_pp0_stage0_01001 <= ((icmp_ln153_fu_121_p2 = ap_const_lv1_0) and (in_V_V_TVALID = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1));
    end process;


    ap_block_pp0_stage0_11001_assign_proc : process(in_V_V_TVALID, ap_enable_reg_pp0_iter0, icmp_ln153_fu_121_p2, ap_enable_reg_pp0_iter1, ap_block_state4_io)
    begin
                ap_block_pp0_stage0_11001 <= (((icmp_ln153_fu_121_p2 = ap_const_lv1_0) and (in_V_V_TVALID = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1)) or ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_boolean_1 = ap_block_state4_io)));
    end process;


    ap_block_pp0_stage0_subdone_assign_proc : process(in_V_V_TVALID, ap_enable_reg_pp0_iter0, icmp_ln153_fu_121_p2, ap_enable_reg_pp0_iter1, ap_block_state4_io)
    begin
                ap_block_pp0_stage0_subdone <= (((icmp_ln153_fu_121_p2 = ap_const_lv1_0) and (in_V_V_TVALID = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1)) or ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_boolean_1 = ap_block_state4_io)));
    end process;


    ap_block_state3_pp0_stage0_iter0_assign_proc : process(in_V_V_TVALID, icmp_ln153_fu_121_p2)
    begin
                ap_block_state3_pp0_stage0_iter0 <= ((icmp_ln153_fu_121_p2 = ap_const_lv1_0) and (in_V_V_TVALID = ap_const_logic_0));
    end process;


    ap_block_state4_io_assign_proc : process(m_axi_out_V_WREADY, icmp_ln153_reg_139)
    begin
                ap_block_state4_io <= ((icmp_ln153_reg_139 = ap_const_lv1_0) and (m_axi_out_V_WREADY = ap_const_logic_0));
    end process;

        ap_block_state4_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_pp0_exit_iter0_state3_assign_proc : process(icmp_ln153_fu_121_p2)
    begin
        if ((icmp_ln153_fu_121_p2 = ap_const_lv1_1)) then 
            ap_condition_pp0_exit_iter0_state3 <= ap_const_logic_1;
        else 
            ap_condition_pp0_exit_iter0_state3 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, m_axi_out_V_BVALID, ap_CS_fsm_state9)
    begin
        if ((((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1)) or ((m_axi_out_V_BVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state9)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);

    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_enable_reg_pp0_iter0 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(m_axi_out_V_BVALID, ap_CS_fsm_state9)
    begin
        if (((m_axi_out_V_BVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state9))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    i_fu_127_p2 <= std_logic_vector(unsigned(i_0_reg_94) + unsigned(ap_const_lv5_1));
    icmp_ln153_fu_121_p2 <= "1" when (i_0_reg_94 = ap_const_lv5_10) else "0";

    in_V_V_TDATA_blk_n_assign_proc : process(in_V_V_TVALID, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0, icmp_ln153_fu_121_p2)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (icmp_ln153_fu_121_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            in_V_V_TDATA_blk_n <= in_V_V_TVALID;
        else 
            in_V_V_TDATA_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    in_V_V_TREADY_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, icmp_ln153_fu_121_p2, ap_block_pp0_stage0_11001)
    begin
        if (((icmp_ln153_fu_121_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            in_V_V_TREADY <= ap_const_logic_1;
        else 
            in_V_V_TREADY <= ap_const_logic_0;
        end if; 
    end process;

    m_axi_out_V_ARADDR <= ap_const_lv64_0;
    m_axi_out_V_ARBURST <= ap_const_lv2_0;
    m_axi_out_V_ARCACHE <= ap_const_lv4_0;
    m_axi_out_V_ARID <= ap_const_lv1_0;
    m_axi_out_V_ARLEN <= ap_const_lv32_0;
    m_axi_out_V_ARLOCK <= ap_const_lv2_0;
    m_axi_out_V_ARPROT <= ap_const_lv3_0;
    m_axi_out_V_ARQOS <= ap_const_lv4_0;
    m_axi_out_V_ARREGION <= ap_const_lv4_0;
    m_axi_out_V_ARSIZE <= ap_const_lv3_0;
    m_axi_out_V_ARUSER <= ap_const_lv1_0;
    m_axi_out_V_ARVALID <= ap_const_logic_0;
    m_axi_out_V_AWADDR <= out_V_addr_reg_133;
    m_axi_out_V_AWBURST <= ap_const_lv2_0;
    m_axi_out_V_AWCACHE <= ap_const_lv4_0;
    m_axi_out_V_AWID <= ap_const_lv1_0;
    m_axi_out_V_AWLEN <= ap_const_lv32_10;
    m_axi_out_V_AWLOCK <= ap_const_lv2_0;
    m_axi_out_V_AWPROT <= ap_const_lv3_0;
    m_axi_out_V_AWQOS <= ap_const_lv4_0;
    m_axi_out_V_AWREGION <= ap_const_lv4_0;
    m_axi_out_V_AWSIZE <= ap_const_lv3_0;
    m_axi_out_V_AWUSER <= ap_const_lv1_0;

    m_axi_out_V_AWVALID_assign_proc : process(m_axi_out_V_AWREADY, ap_CS_fsm_state2)
    begin
        if (((m_axi_out_V_AWREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            m_axi_out_V_AWVALID <= ap_const_logic_1;
        else 
            m_axi_out_V_AWVALID <= ap_const_logic_0;
        end if; 
    end process;


    m_axi_out_V_BREADY_assign_proc : process(m_axi_out_V_BVALID, ap_CS_fsm_state9)
    begin
        if (((m_axi_out_V_BVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state9))) then 
            m_axi_out_V_BREADY <= ap_const_logic_1;
        else 
            m_axi_out_V_BREADY <= ap_const_logic_0;
        end if; 
    end process;

    m_axi_out_V_RREADY <= ap_const_logic_0;
    m_axi_out_V_WDATA <= tmp_V_reg_148;
    m_axi_out_V_WID <= ap_const_lv1_0;
    m_axi_out_V_WLAST <= ap_const_logic_0;
    m_axi_out_V_WSTRB <= ap_const_lv1_1;
    m_axi_out_V_WUSER <= ap_const_lv1_0;

    m_axi_out_V_WVALID_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, icmp_ln153_reg_139, ap_block_pp0_stage0_11001)
    begin
        if (((icmp_ln153_reg_139 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            m_axi_out_V_WVALID <= ap_const_logic_1;
        else 
            m_axi_out_V_WVALID <= ap_const_logic_0;
        end if; 
    end process;


    out_V_blk_n_AW_assign_proc : process(m_axi_out_V_AWREADY, ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            out_V_blk_n_AW <= m_axi_out_V_AWREADY;
        else 
            out_V_blk_n_AW <= ap_const_logic_1;
        end if; 
    end process;


    out_V_blk_n_B_assign_proc : process(m_axi_out_V_BVALID, ap_CS_fsm_state9)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            out_V_blk_n_B <= m_axi_out_V_BVALID;
        else 
            out_V_blk_n_B <= ap_const_logic_1;
        end if; 
    end process;


    out_V_blk_n_W_assign_proc : process(m_axi_out_V_WREADY, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, ap_enable_reg_pp0_iter1, icmp_ln153_reg_139)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (icmp_ln153_reg_139 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
            out_V_blk_n_W <= m_axi_out_V_WREADY;
        else 
            out_V_blk_n_W <= ap_const_logic_1;
        end if; 
    end process;

    zext_ln321_fu_105_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(out_V_offset1),64));
end behav;
